[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Best Practices for Using eBird Data",
    "section": "",
    "text": "Matthew Strimas-Mackey, Wesley M. Hochachka, Viviana Ruiz-Gutierrez, Orin J. Robinson, Eliot T. Miller, Tom Auer, Steve Kelling, Daniel Fink, Alison Johnston\nVersion 2.0\nThis is a development version of Best Practices for Using eBird Data v2. It is a work in progress and should be treated as experimental.\n\nWelcome\nBest Practices for Using eBird Data is a supplement to Analytical guidelines to increase the value of community science data: An example using eBird data to estimate species distributions (Johnston et al. 2021). This paper describes the challenges associated with making inferences from biological citizen science data and proposes a set of best practices for making reliable estimates of species distributions from these data. Throughout, the paper uses eBird, the world’s largest biological citizen science project, as a case study to illustrate the best practices. This book acts as a supplement to the paper, showing readers how to implement these best practices within R using real data from eBird. After completing this book, readers should be able to process eBird data to prepare them for robust analyses, train models to estimate encounter rate, relative abundance, and occupancy, and assess the performance of these models. Readers should be comfortable with the R programming language, and read the Prerequisites and Setup sections of the introduction, before diving into this book.\nTo submit fixes or suggest additions and improvements to this book, please file an issue on GitHub.\nPlease cite this book as:\n\nStrimas-Mackey, M., W.M. Hochachka, V. Ruiz-Gutierrez, O.J. Robinson, E.T. Miller, T. Auer, S. Kelling, D. Fink, A. Johnston. 2023. Best Practices for Using eBird Data. Version 2.0. https://ebird.github.io/ebird-best-practices/. Cornell Lab of Ornithology, Ithaca, New York. https://doi.org/10.5281/zenodo.3620739"
  },
  {
    "objectID": "intro.html#intro-intro",
    "href": "intro.html#intro-intro",
    "title": "1  Introduction and Setup",
    "section": "1.1 Introduction",
    "text": "1.1 Introduction\nCitizen science data are increasingly making important contributions to ecological research and conservation. One of the most common forms of citizen science data is derived from members of the public recording species observations. eBird (Sullivan et al. 2014) is the largest of these biological citizen science programs. The eBird database contains well over one billion bird observations from every country in the world, with observations of nearly every bird species on Earth. The eBird database is valuable to researchers across the globe, due to its year-round, broad spatial coverage, high volumes of open access data, and applications to many ecological questions. These data have been widely used in scientific research to study phenology, species distributions, population trends, evolution, behavior, global change, and conservation. However, robust inference with eBird data requires careful processing of the data to address the challenges associated with citizen science datasets. This book, and the associated paper, outlines a set of best practices for addressing these challenges and making reliable estimates of species distributions from eBird data.\nThere are two key characteristics that distinguish eBird from many other citizen science projects and facilitate robust ecological analyses: the checklist structure enables non-detection to be inferred and the effort information associated with a checklist facilitates robust analyses by accounting for variation in the observation process (La Sorte et al. 2018; Kelling et al. 2018). When a participant submits data to eBird, sightings of multiple species from the same observation period are grouped together into a single checklist. Complete checklists are those for which the participant reported all birds that they were able to detect and identify. Critically, this enables scientists to infer counts of zero individuals for the species that were not reported. If checklists are not complete, it’s not possible to ascertain whether the absence of a species on a list was a non-detection or the result of a participant not recording the species. In addition, citizen science projects occur on a spectrum from those with predefined sampling structures that resemble more traditional survey designs, to those that are unstructured and collect observations opportunistically. eBird is a semi-structured project, having flexible, easy to follow protocols that attract many participants, but also collecting data on the observation process (e.g. amount of time spent birding, number of observers, etc.), which can be used in subsequent analyses (Kelling et al. 2018).\nDespite the strengths of eBird data, species observations collected through citizen science projects present a number of challenges that are not found in conventional scientific data. The following are some of the primary challenges associated these data; challenges that will be addressed throughout this book:\n\nTaxonomic bias: participants often have preferences for certain species, which may lead to preferential recording of some species over others (Greenwood 2007; Tulloch and Szabo 2012). Restricting analyses to complete checklists largely mitigates this issue.\nSpatial bias: most participants in citizen science surveys sample near their homes (Luck et al. 2004), in easily accessible areas such as roadsides (Kadmon, Farber, and Danin 2004), or in areas and habitats of known high biodiversity (Prendergast et al. 1993). A simple method to reduce the spatial bias that we describe is to create an equal area grid over the region of interest, and sample a given number of checklists from within each grid cell.\nTemporal bias: participants preferentially sample when they are available, such as weekends (Courter et al. 2013), and at times of year when they expect to observe more birds, notably during spring migration (Sullivan et al. 2014). To address the weekend bias, we recommend using a temporal scale of a week or multiple weeks for most analyses.\nSpatial precision: the spatial location of an eBird checklist is given as a single latitude-longitude point; however, this may not be precise for two main reasons. First, for traveling checklists, this location represents just one point on the journey. Second, eBird checklists are often assigned to a hotspot (a common location for all birders visiting a popular birding site) rather than their true location. For these reasons, it’s not appropriate to align the eBird locations with very precise habitat covariates, and we recommend summarizing covariates within a neighborhood around the checklist location.\nClass imbalance: bird species that are rare or hard to detect may have data with high class imbalance, with many more checklists with non-detections than detections. For these species, a distribution model predicting that the species is absent everywhere will have high accuracy, but no ecological value. We’ll follow the methods for addressing class imbalance proposed by Robinson et al. (2018).\nVariation in detectability: detectability describes the probability of a species that is present in an area being detected and identified. Detectability varies by season, habitat, and species (Johnston et al. 2014, 2018). Furthermore, eBird data are collected with high variation in effort, time of day, number of observers, and external conditions such as weather, all of which can affect the detectability of species (Ellis and Taylor 2018; Oliveira et al. 2018). Therefore, detectability is particularly important to consider when comparing between seasons, habitats or species. Since eBird uses a semi-structured protocol, that collects variables associated with variation in detectability, we’ll be able to account for a larger proportion of this variation in our analyses.\n\nThe remainder of this book will demonstrate how to address these challenges using real data from eBird to produce reliable estimates of species distributions. In general, we’ll take a two-pronged approach to dealing with unstructured data and maximizing the value of citizen science data: imposing more structure onto the data via data filtering and including covariates in models to account for the remaining variation.\nThe next chapter demonstrates how to access and prepare eBird data for modeling. The following chapter covers preparing environmental variables to be used as model predictors. The remaining three chapters provide examples of different species distribution models that can be fit using these data: encounter rate models, relative abundance models, and occupancy models. Although these examples focus on the use of eBird data, in many cases the techniques they illustrate also apply to similar citizen science datasets."
  },
  {
    "objectID": "intro.html#intro-pre",
    "href": "intro.html#intro-pre",
    "title": "1  Introduction and Setup",
    "section": "1.2 Prerequisites",
    "text": "1.2 Prerequisites\nTo understand the code examples used throughout this book, some knowledge of the programming language R is required. If you don’t meet this requirement, or begin to feel lost trying to understand the code used in this book, we suggest consulting one of the excellent free resources available online for learning R. For those with little or no prior programming experience, Hands-On Programming with R is an excellent introduction. For those with some familiarity with the basics of R that want to take their skills to the next level, we suggest R for Data Science as the best resource for learning how to work with data within R.\n\n1.2.1 Tidyverse\nThroughout this book, we use packages from the Tidyverse, an opinionated collection of R packages designed for data science. Packages such as ggplot2, for data visualization, and dplyr, for data manipulation, are two of the most well known Tidyverse packages; however, there are many more. In the following chapters, we often use Tidyverse functions without explanation. If you encounter a function you’re unfamiliar with, consult the documentation for help (e.g. ?mutate to see help for the dplyr function mutate()). More generally, the free online book R for Data Science by Hadley Wickham is the best introduction to working with data in R using the Tidyverse.\nThe one piece of the Tidyverse that we will cover here, because it is ubiquitous throughout this book and unfamiliar to many, is the pipe operator %>%. The pipe operator takes the expression to the left of it and “pipes” it into the first argument of the expression on the right, i.e. one can replace f(x) with x %>% f(). The pipe makes code significantly more readable by avoiding nested function calls, reducing the need for intermediate variables, and making sequential operations read left-to-right. For example, to add a new variable to a data frame, then summarize using a grouping variable, the following are equivalent:\n\nlibrary(dplyr)\n\n# pipes\nmtcars %>% \n  mutate(wt_kg = 454 * wt) %>% \n  group_by(cyl) %>% \n  summarize(wt_kg = mean(wt_kg))\n#> # A tibble: 3 × 2\n#>     cyl wt_kg\n#>   <dbl> <dbl>\n#> 1     4 1038.\n#> 2     6 1415.\n#> 3     8 1816.\n\n# intermediate variables\nmtcars_kg <- mutate(mtcars, wt_kg = 454 * wt)\nmtcars_grouped <- group_by(mtcars_kg, cyl)\nsummarize(mtcars_grouped, wt_kg = mean(wt_kg))\n#> # A tibble: 3 × 2\n#>     cyl wt_kg\n#>   <dbl> <dbl>\n#> 1     4 1038.\n#> 2     6 1415.\n#> 3     8 1816.\n\n# nested function calls\nsummarize(\n  group_by(\n    mutate(mtcars, wt_kg = 454 * wt),\n    cyl\n  ),\n  wt_kg = mean(wt_kg)\n)\n#> # A tibble: 3 × 2\n#>     cyl wt_kg\n#>   <dbl> <dbl>\n#> 1     4 1038.\n#> 2     6 1415.\n#> 3     8 1816.\n\nOnce you become familiar with the pipe operator, we believe you’ll find the the above example using the pipe the easiest of the three to read and interpret."
  },
  {
    "objectID": "intro.html#intro-setup",
    "href": "intro.html#intro-setup",
    "title": "1  Introduction and Setup",
    "section": "1.3 Setup",
    "text": "1.3 Setup\n\n1.3.1 Data package\nThe next two chapters of this book focus on obtaining and preparing eBird data and environmental variables for the modeling that will occur in the remaining chapters. These steps can be time consuming and laborious. If you’d like to skip straight to the analysis, download this package of prepared data. Unzip this file so that the contents are in the data/ subdirectory of your RStudio project folder. This will allow you to jump right in to the modeling and ensure that you’re using exactly the same data as was used when creating this book. This is a good option if you don’t have a fast enough internet connection to download the eBird data.\n\n\n1.3.2 Software\nThe examples throughout this website use the programming language R (R-base?) to work with eBird data. If you don’t have R installed, download it now, if you already have R, there’s a good chance you have an outdated version, so update it to the latest version now. R is updated regularly, and it is important that you have the most recent version of R to avoid headaches when installing packages. We suggest checking every couple months to see if a new version has been released.\nWe strongly encourage R users to use RStudio. RStudio is not required to follow along with this book; however, it will make your R experience significantly better. If you don’t have RStudio, download it now, if you already have it, update it because new versions with useful additional features are regularly released.\nDue to the large size of the eBird dataset, working with it requires the Unix command-line utility AWK. You won’t need to use AWK directly, since the R package auk does this hard work for you, but you do need AWK to be installed on your computer. Linux and Mac users should already have AWK installed on their machines; however, Windows user will need to install Cygwin to gain access to AWK. Cygwin is free software that allows Windows users to use Unix tools. Cygwin should be installed in the default location (C:/cygwin/bin/gawk.exe or C:/cygwin64/bin/gawk.exe) in order for everything to work correctly. Note: there’s no need to do anything at the “Select Utilities” screen, AWK will be installed by default.\n\n\n1.3.3 R packages\nThe examples in this book use a variety of R packages for accessing eBird data, working with spatial data, data processing and manipulation, and model fitting. To install all the packages necessary to work through this book, run the following code:\n\nif (!requireNamespace(\"pak\", quietly = TRUE)) {\n  install.packages(\"pak\")\n}\npak::pak(\"ebird/ebird-best-practices\")\n\nNote that several of the spatial packages require dependencies. If installing these packages fails, consult the instructions for installing dependencies on the sf package website. Finally, ensure all R packages are updated to their most recent version by clicking on the Update button on the Packages tab in RStudio.\n\n\n1.3.4 eBird data access\nAccess to the eBird database is provided via the eBird Basic Dataset (EBD) as tab-separated text files. To access the EBD, begin by creating an eBird account and signing in. Then visit the eBird Data Access page and fill out the data access request form. eBird data access is free for most uses; however, you will need to request access in order to download the EBD. Filling out the access request form allows eBird to keep track of the number of people using the data and obtain information on the applications for which the data are used.\nOnce you’ve granted access to the EBD, you will be able to download either the entire eBird dataset or subsets for specific species, regions, or time periods. This is covered in more detail in the next chapter.\nTo use eBird data in R, you’ll need to reference the full path to the text files, for example ~/data/ebird/ebd_relMarch-2023.txt. In general, it’s best to avoid using absolute paths in R scripts because it makes them less portable–if you’re sharing the files with someone else, they’ll need to change the file paths to point to the location where they’ve stored the eBird data. The R package auk provides a workaround for this, by allowing users to set an environment variable (EBD_PATH) that points to the directory where you’ve stored the eBird data. We suggest choosing a sensible central location for all eBird data files such as ~/data/ebird/. Then set the environment variable using auk_set_ebd_path().\n\n# set EBD_PATH environment variable\nauk::auk_set_ebd_path(\"~/data/ebird/\")\n\n\n\n1.3.5 GIS data\nThroughout this book, we’ll be producing maps of species distributions. To provide context for these distributions, we’ll need GIS data for political boundaries. Natural Earth is the best source for a range of tightly integrated vector and raster GIS data for producing professional cartographic maps. The R package, rnaturalearth provides a convenient method for accessing these data from within R.\nIn the next chapter, we provide a link to download a data package that will include all the necessary GIS data. However, for reference, the following code was used to generate the GIS dataset. Running this code will create a GeoPackage containing the necessary spatial layers in data/gis-data.gpkg.\n\nlibrary(dplyr)\nlibrary(rnaturalearth)\nlibrary(sf)\n\n# file to save spatial data\ngpkg_file <- \"data/gis-data.gpkg\"\ndir.create(dirname(gpkg_file), showWarnings = FALSE, recursive = TRUE)\n\n# political boundaries\n# land border with lakes removed\nne_land <- ne_download(scale = 50, category = \"cultural\",\n                       type = \"admin_0_countries_lakes\",\n                       returnclass = \"sf\") %>%\n  filter(CONTINENT == \"North America\") %>%\n  st_set_precision(1e6) %>%\n  st_union()\n# state boundaries for united states\nne_states <- ne_download(scale = 50, category = \"cultural\",\n                       type = \"admin_1_states_provinces\",\n                       returnclass = \"sf\") %>% \n  filter(iso_a2 == \"US\") %>% \n  select(state = name, state_code = iso_3166_2)\n# country lines\n# downloaded globally then filtered to north america with st_intersect()\nne_country_lines <- ne_download(scale = 50, category = \"cultural\",\n                                type = \"admin_0_boundary_lines_land\",\n                                returnclass = \"sf\") %>% \n  st_geometry()\nne_country_lines <- st_intersects(ne_country_lines, ne_land, sparse = FALSE) %>%\n  as.logical() %>%\n  {ne_country_lines[.]}\n# states, north america\nne_state_lines <- ne_download(scale = 50, category = \"cultural\",\n                              type = \"admin_1_states_provinces_lines\",\n                              returnclass = \"sf\") %>%\n  filter(ADM0_A3 %in% c(\"USA\", \"CAN\")) %>%\n  mutate(iso_a2 = recode(ADM0_A3, USA = \"US\", CAN = \"CAN\")) %>% \n  select(country = ADM0_NAME, country_code = iso_a2)\n\n# save all layers to a geopackage\nunlink(gpkg_file)\nwrite_sf(ne_land, gpkg_file, \"ne_land\")\nwrite_sf(ne_states, gpkg_file, \"ne_states\")\nwrite_sf(ne_country_lines, gpkg_file, \"ne_country_lines\")\nwrite_sf(ne_state_lines, gpkg_file, \"ne_state_lines\")\n\n\n\n\n\nCourter, Jason R., Ron J. Johnson, Claire M. Stuyck, Brian A. Lang, and Evan W. Kaiser. 2013. “Weekend Bias in Citizen Science Data Reporting: Implications for Phenology Studies.” International Journal of Biometeorology 57 (5): 715–20. https://doi.org/10.1007/s00484-012-0598-7.\n\n\nEllis, Murray V., and Jennifer E. Taylor. 2018. “Effects of Weather, Time of Day, and Survey Effort on Estimates of Species Richness in Temperate Woodlands.” Emu-Austral Ornithology 118 (2): 183–92.\n\n\nGreenwood, Jeremy J. D. 2007. “Citizens, Science and Bird Conservation.” Journal of Ornithology 148 (1): 77–124. https://doi.org/10.1007/s10336-007-0239-9.\n\n\nJohnston, Alison, Daniel Fink, Wesley M. Hochachka, and Steve Kelling. 2018. “Estimates of Observer Expertise Improve Species Distributions from Citizen Science Data.” Methods in Ecology and Evolution 9 (1): 88–97.\n\n\nJohnston, Alison, Stuart E. Newson, Kate Risely, Andy J. Musgrove, Dario Massimino, Stephen R. Baillie, and James W. Pearce-Higgins. 2014. “Species Traits Explain Variation in Detectability of UK Birds.” Bird Study 61 (3): 340–50.\n\n\nKadmon, Ronen, Oren Farber, and Avinoam Danin. 2004. “Effect of Roadside Bias on the Accuracy of Predictive Maps Produced by Bioclimatic Models.” Ecological Applications 14 (2): 401–13.\n\n\nKelling, Steve, Alison Johnston, Daniel Fink, Viviana Ruiz-Gutierrez, Rick Bonney, Aletta Bonn, Miguel Fernandez, et al. 2018. “Finding the Signal in the Noise of Citizen Science Observations.” bioRxiv, May, 326314. https://doi.org/10.1101/326314.\n\n\nLa Sorte, Frank A., Christopher A. Lepczyk, Jessica L. Burnett, Allen H. Hurlbert, Morgan W. Tingley, and Benjamin Zuckerberg. 2018. “Opportunities and Challenges for Big Data Ornithology.” The Condor 120 (2): 414–26.\n\n\nLuck, Gary W., Taylor H. Ricketts, Gretchen C. Daily, and Marc Imhoff. 2004. “Alleviating Spatial Conflict Between People and Biodiversity.” Proceedings of the National Academy of Sciences 101 (1): 182–86. https://doi.org/10.1073/pnas.2237148100.\n\n\nOliveira, Camilo Viana, Fabio Olmos, Manoel dos Santos-Filho, and Christine Steiner São Bernardo. 2018. “Observation of Diurnal Soaring Raptors In Northeastern Brazil Depends On Weather Conditions and Time of Day.” Journal of Raptor Research 52 (1): 56–65.\n\n\nPrendergast, J. R., S. N. Wood, J. H. Lawton, and B. C. Eversham. 1993. “Correcting for Variation in Recording Effort in Analyses of Diversity Hotspots.” Biodiversity Letters, 39–53.\n\n\nRobinson, Orin J., Viviana Ruiz-Gutierrez, Daniel Fink, Robert J. Meese, Marcel Holyoak, and Evan G. Cooch. 2018. “Using Citizen Science Data in Integrated Population Models to Inform Conservation Decision-Making.” bioRxiv, 293464.\n\n\nSullivan, Brian L., Jocelyn L. Aycrigg, Jessie H. Barry, Rick E. Bonney, Nicholas Bruns, Caren B. Cooper, Theo Damoulas, et al. 2014. “The eBird Enterprise: An Integrated Approach to Development and Application of Citizen Science.” Biological Conservation 169 (January): 31–40. https://doi.org/10.1016/j.biocon.2013.11.003.\n\n\nTulloch, Ayesha IT, and Judit K. Szabo. 2012. “A Behavioural Ecology Approach to Understand Volunteer Surveying for Citizen Science Datasets.” Emu-Austral Ornithology 112 (4): 313–25."
  },
  {
    "objectID": "ebird.html#ebird-intro",
    "href": "ebird.html#ebird-intro",
    "title": "2  eBird Data",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\neBird data are collected and organized around the concept of a checklist, representing observations from a single birding event, such as a 1 km walk through a park or 15 minutes observing bird feeders in your backyard. Each checklist contains a list of species observed, counts of the number of individuals seen of each species, the location and time of the observations, and a measure of the effort expended while collecting these data. The following image depicts a typical eBird checklist as viewed on the eBird website:\n\nAlthough eBird collects semi-structured citizen science data, three elements of eBird checklists distinguish them from data collected via most other similar citizen science projects. First, eBird checklist require users to specify the survey protocol they used, whether it’s traveling, stationary, incidental (i.e. if the observations were collected when birding was not the primary activity), or one of the other protocols. Second, in addition to typical information on when and where the data were collected, checklists contain effort information specifying how long the observer searched, how far they traveled, and how many observers were part of the party. Finally, observers are asked to indicate whether they are reporting all the birds they were able to identify. Checklists with all species reported, known as complete checklists, enable researchers to identify which species were not detected (rather than just not reported). These inferred non-detections allow data to be zero-filled, so there’s a zero count for any species not recorded. Complete checklists with effort information facilitate robust analyses, and thus represent the gold standard of eBird checklists. Because of these factors, eBird data are often referred to as semi-structured (Kelling et al. 2018).\neBird data are typically distributed in two parts: observation data and checklist data. In the observation dataset, each row corresponds to the sighting of a single species on a checklist, including the count and any other species-level information (e.g. age, sex, species comments, etc.). In the checklist dataset, each row corresponds to a checklist, including the date, time, location, effort (e.g. distance traveled, time spent, etc.), and any additional checklist-level information (e.g. whether this is a complete checklist or not). The two datasets can be joined together using a unique checklist identifier (sometimes referred to as the sampling event identifier).\nIn this chapter, we’ll download eBird data and demonstrate how to use the R package auk to extract subsets of the data for analysis. Next, we’ll show how to import the data into R and zero-fill it to produce detection/non-detection data suitable for modeling species distribution and abundance. Finally, we’ll perform some pre-processing steps required to ensure proper analysis of the data."
  },
  {
    "objectID": "ebird.html#ebird-download",
    "href": "ebird.html#ebird-download",
    "title": "2  eBird Data",
    "section": "2.2 Downloading data",
    "text": "2.2 Downloading data\nThe observation and checklist data are released as tab-separated text files referred to as the eBird Basic Dataset (EBD) and the Sampling Event Data (SED), respectively. These files are released monthly and contain all validated bird sightings in the eBird database at the time of release. The EBD (i.e. the observation data) can be downloaded in its entirety or a subset for a given species, region, or time period can be requested via the “Custom Download” form. We strongly recommend against attempting to download the complete EBD since it’s well over 100GB at the time of writing. Instead, we will demonstrate a workflow using the “Custom Download” approach. In what follows, we will assume you have followed the instructions for requesting access to eBird data outlined in the previous chapter.\nIn the interest of making examples concrete, throughout this book, we’ll use the specific example of Wood Thrush observations from Georgia (the US state, not the country) in June for our analyses. We’ll start by downloading the corresponding eBird observations by visiting the eBird Basic Dataset download page and filling out the Custom Download form to request eBird data from Georgia.\n\nOnce the data are ready, you will an email with a download link. The downloaded data will be in a compressed .zip format, and should be unarchived. The resulting directory will contain a text file (e.g. ebd_US-GA_woothr_relMar-2023.txt) containing all the Wood Thrush observations from Georgia. The relMar-2023 component of the file name describes which version of the EBD this dataset came from; in this case it’s the March 2023 release.\nFor some uses cases, such as making a map of eBird observations, the EBD will be sufficient. However, for many applications, including all analyses in this book, we need both the detections and non-detections (i.e. the checklists where the species was not detected). To infer the non-detections we’ll need the full population of checklists for our region and time period of interest, which is provided in the form of the SED. Unlike the EBD, the SED can only be downloaded in it’s entirety rather than as a custom subset; however, the file is much smaller (~4GB at the time of writing) and therefore easier to deal with.\nDownload the Sampling Event Data now, then use a compression utility to uncompress the .tar file and the .txt.gz file it contains to produce a text file (e.g. ebd_sampling_relMar-2023.txt). It’s absolutely critical to confirm that the versions of the EBD and SED are the same, for example both files have relMar-2023 in the name, otherwise they will be mismatched when we later try to combine them. Move these the EBD and SED text files to the central location for eBird data that you set in the Introduction. To be reminded of the path to this directory use auk::auk_get_ebd_path()."
  },
  {
    "objectID": "ebird.html#ebird-filter",
    "href": "ebird.html#ebird-filter",
    "title": "2  eBird Data",
    "section": "2.3 Data extraction with auk",
    "text": "2.3 Data extraction with auk\neBird contains an impressive amount of data (over 1 billion bird observations!); however, this makes the data particularly challenging to work with. Very large text files can’t be opened in R, Excel, or most other software because they may require more memory than your computer has access to. In addition, even if these files can be read into R, they can be extremely slow to process. Fortunately, the R package auk has been specifically designed to extract subsets of data from the EBD and SED for analysis using the Unix command line text processing utility AWK. AWK only allows for coarse filtering, but the data can always be further refined once in R. With this in mind, the goal when using auk should always be to subset the EBD and SED text files down to a manageable size, small enough that they can be imported into R for further processing or analysis. In our case, that will mean extracting Wood Thrush records from Georgia in June.\nFiltering the eBird data using auk requires three steps. First, reference the EBD and SED text files using the function auk_ebd(). If you’ve followed the setup instruction in the Introduction and the previous section, you’ll have these text files on your computer and will have pointed auk to the directory they’re stored in using auk_set_ebd_path().\nBefore running any of the following code, create an RStudio project for following along with this book. The project will be a self contained space for all the code, input data, and outputs that comprise the lessons in this book. In addition, using a project will ensure your working directory is set to the project directory.\nDownloading and extracting eBird data in this section can be time consuming and laborious. If you would prefer to skip to the next section, download the data package mentioned in the Introduction and jump to the {next section}(#ebird-zf). Just make sure you load the packages in the first code chunk before proceeding.\n\nlibrary(auk)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(sf)\n\n# setup data directory\ndir.create(\"data\", showWarnings = FALSE, recursive = TRUE)\n\nebd <- auk_ebd(\"ebd_US-GA_woothr_relMar-2023.txt\", \n               file_sampling = \"ebd_sampling_relMar-2023.txt\")\n\nNext, define the filters that you want to apply to the EBD. Each field that you can filter on has an associated function. For example, we’ll filter to observations from Georgia with auk_state(), in June of any year with auk_date(), restrict observations to those from either Stationary or Traveling protocols with auk_protocol(), and only keep complete checklists with auk_complete() since we intend to zero-fill the data. For a full list of possible filters, consult the package documentation.\nSome of the filtering work has already been done for us by downloading an EBD subset via the Custom Download form: we only have observations for Wood Thrush in Georgia. However, it’s critical that we filter the EBD and SED in exactly the same way to produce exactly the same population of checklists, so we include the filter for Georgia even though it’s redundant for the EBD.\n\nebd_filters <- ebd %>% \n  # georgia, make sure to use the ebird region code here\n  auk_state(state = \"US-GA\") %>% \n  # june, use * to get data from any year\n  auk_date(date = c(\"*-06-01\", \"*-06-30\")) %>% \n  # restrict to the standard traveling and stationary count protocols\n  auk_protocol(protocol = c(\"Stationary\", \"Traveling\")) %>%\n  # only complete checklists to facilitate zero-filling\n  auk_complete()\nebd_filters\n#> Input \n#>   EBD: /Users/mes335/data/ebird/ebd_US-GA_woothr_relMar-2023.txt \n#>   Sampling events: /Users/mes335/data/ebird/ebd_sampling_relMar-2023.txt \n#> \n#> Output \n#>   Filters not executed\n#> \n#> Filters \n#>   Species: all\n#>   Countries: all\n#>   States: US-GA\n#>   Counties: all\n#>   BCRs: all\n#>   Bounding box: full extent\n#>   Years: all\n#>   Date: *-06-01 - *-06-30\n#>   Start time: all\n#>   Last edited date: all\n#>   Protocol: Stationary, Traveling\n#>   Project code: all\n#>   Duration: all\n#>   Distance travelled: all\n#>   Records with breeding codes only: no\n#>   Complete checklists only: yes\n\nPrinting the object ebd_filters above shows what filters have been set. At this point, we’ve only defined the filters, not applied them to the data. The last step is to use auk_filter() to compile the filters into an AWK script and run it to produce two output files: one for the EBD and one for the SED. This step typically takes at least 30 minutes to run since the SED file is so large. As a result, it’s wise to wrap this in an if statement, so it’s only run once. As noted in the Introduction, Windows users will need to install Cygwin for this next step to work.\n\n# output files\nf_ebd <- \"data/observations_woothr_june_us-ga.txt\"\nf_sed <- \"data/checklists_june_us-ga.txt\"\n\n# only run if the output files don't already exist\nif (!file.exists(f_ebd)|| !file.exists(f_sed)) {\n  auk_filter(ebd_filters, file = f_ebd, file_sampling = f_sed)\n}\n\nThe resulting SED file is now about 13MB, compared to over 4GB for the original dataset, which means it can easily be read into R!"
  },
  {
    "objectID": "ebird.html#ebird-zf",
    "href": "ebird.html#ebird-zf",
    "title": "2  eBird Data",
    "section": "2.4 Importing and zero-filling",
    "text": "2.4 Importing and zero-filling\nThe previous step left us with two tab separated text files, one for the EBD (i.e. observation data) and one for the SED (i.e. checklist data). Next, we’ll use auk_zerofill() to read these two files into R and combine them together to produce zero-filled, detection/non-detection data (also called presence/absence data). To just read the EBD or SED, but not combine them, use read_ebd() or read_sampling(), respectively.\n\nzf <- auk_zerofill(f_ebd, f_sed, collapse = TRUE)\n\nWhen any of the read functions from auk are used, two important processing steps occur by default behind the scenes. 1. Taxonomic rollup: eBird observations can be made at levels below species (e.g. subspecies) or above species (e.g. a bird that was only identified as Duck sp.); however, for most uses we’ll want observations at the species level. auk_rollup() is applied by default when auk_zerofill() is used. It drops all observations not identifiable to a species and rolls up all observations reported below species to the species level. 2. Collapsing group checklist: eBird also allows for group checklists, those shared by multiple users. These checklists lead to duplication or near duplication of records within the dataset and the function auk_unique(), applied by default by auk_zerofill(), addresses this by only keeping one independent copy of each checklist.\nFinally, by default auk_zerofill() returns a compact representation of the data, consisting of a list of two data frames, one with checklist data and the other with observation data; the use of collapse = TRUE combines these into a single data frame, which will be easier to work with.\nBefore continuing, we’ll transform some of the variables to a more useful form for modelling. We convert time to a decimal value between 0 and 24, and we force the distance travelled to 0 for stationary checklists. Notably, eBirders have the option of entering an “X” rather than a count for a species, to indicate that the species was present, but they didn’t keep track of how many individuals were observed. During the modeling stage, we’ll want the observation_count variable stored as an integer and we’ll convert “X” to NA to allow for this.\n\n# function to convert time observation to hours since midnight\ntime_to_decimal <- function(x) {\n  x <- hms(x, quiet = TRUE)\n  hour(x) + minute(x) / 60 + second(x) / 3600\n}\n\n# clean up variables\nzf <- zf %>% \n  mutate(\n    # convert X to NA\n    observation_count = if_else(observation_count == \"X\", \n                                NA_character_, observation_count),\n    observation_count = as.integer(observation_count),\n    # effort_distance_km to 0 for non-travelling counts\n    effort_distance_km = if_else(protocol_type != \"Traveling\", \n                                 0, effort_distance_km),\n    # convert duration to hours\n    effort_hours = duration_minutes / 60,\n    # convert time to decimal hours since midnight\n    hours_of_day = time_to_decimal(time_observations_started),\n    # split date into year and day of year\n    year = year(observation_date),\n    day_of_year = yday(observation_date)\n  )"
  },
  {
    "objectID": "ebird.html#ebird-detect",
    "href": "ebird.html#ebird-detect",
    "title": "2  eBird Data",
    "section": "2.5 Accounting for variation in detectability",
    "text": "2.5 Accounting for variation in detectability\nAs discussed in the Introduction, variation in effort between checklists makes inference challenging, because it is associated with variation in detectability. When working with semi-structured datasets like eBird, one approach to dealing with this variation is to impose some more consistent structure on the data by filtering observations on the effort variables. This reduces the variation in detectability between checklists. Based on our experience working with these data, we suggest restricting checklists to less than 24 hours in duration and 10 km in length, and with 10 or fewer observers. Furthermore, we’ll only consider data from the past 10 years (2013-2022).\n\n# additional filtering\nzf_filtered <- zf %>% \n  filter(\n    # last 10 years of data\n    year >= 2013,\n    # effort filters\n    effort_hours <= 24,\n    effort_distance_km <= 10,\n    number_observers <= 10)\n\nFinally, there are a large number of variables in the EBD that are redundant (e.g. both state names and codes are present) or unnecessary for most modeling exercises (e.g. checklist comments and Important Bird Area codes). These can be removed at this point, keeping only the variables we want for modelling. Then we’ll save the resulting zero-filled observations for use in later chapters.\n\nchecklists <- zf_filtered %>% \n  select(checklist_id, observer_id, sampling_event_identifier,\n         scientific_name,\n         observation_count, species_observed, \n         state_code, locality_id, latitude, longitude,\n         protocol_type, all_species_reported,\n         observation_date, year, day_of_year,\n         hours_of_day, \n         effort_hours, effort_distance_km,\n         number_observers)\nwrite_csv(checklists, \"data/checklists-zf_woothr_june_us-ga.csv\", na = \"\")\n\nIf you’d like to ensure you’re using exactly the same data as was used to generate this book, download the data package mentioned in the setup instructions and place the contents in the data/ subdirectory of your project directory."
  },
  {
    "objectID": "ebird.html#ebird-explore",
    "href": "ebird.html#ebird-explore",
    "title": "2  eBird Data",
    "section": "2.6 Exploratory analysis and visualization",
    "text": "2.6 Exploratory analysis and visualization\nBefore proceeding to fitting species distribution models with these data, it’s worth exploring the dataset to see what we’re working with. Let’s start by making a simple map of the observations. This map uses GIS data available for download in the data package. Place the contents of the zip file in the data/ subdirectory of your project directory.\n\n# load and project gis data to albers equal area conic projection\nmap_proj <- st_crs(\"ESRI:102003\")\nne_land <- read_sf(\"data/gis-data.gpkg\", \"ne_land\") %>% \n  st_transform(crs = map_proj) %>% \n  st_geometry()\nne_country_lines <- read_sf(\"data/gis-data.gpkg\", \"ne_country_lines\") %>% \n  st_transform(crs = map_proj) %>% \n  st_geometry()\nne_state_lines <- read_sf(\"data/gis-data.gpkg\", \"ne_state_lines\") %>% \n  st_transform(crs = map_proj) %>% \n  st_geometry()\nga_boundary <- read_sf(\"data/gis-data.gpkg\", \"ne_states\") %>% \n  filter(state_code == \"US-GA\") %>% \n  st_transform(crs = map_proj) %>% \n  st_geometry()\n\n# prepare ebird data for mapping\nchecklists_sf <- checklists %>% \n  # convert to spatial points\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>% \n  st_transform(crs = map_proj) %>% \n  select(species_observed)\n\n# map\npar(mar = c(0.25, 0.25, 0.25, 0.25))\n# set up plot area\nplot(st_geometry(checklists_sf), col = NA)\n# contextual gis data\nplot(ne_land, col = \"#dddddd\", border = \"#888888\", lwd = 0.5, add = TRUE)\nplot(ga_boundary, col = \"#cccccc\", border = NA, add = TRUE)\nplot(ne_state_lines, col = \"#ffffff\", lwd = 0.75, add = TRUE)\nplot(ne_country_lines, col = \"#ffffff\", lwd = 1.5, add = TRUE)\n# ebird observations\n# not observed\nplot(filter(checklists_sf, !species_observed),\n     pch = 19, cex = 0.1, col = alpha(\"#555555\", 0.25),\n     add = TRUE)\n# observed\nplot(filter(checklists_sf, species_observed),\n     pch = 19, cex = 0.3, col = alpha(\"#4daf4a\", 1),\n     add = TRUE)\n# legend\nlegend(\"bottomright\", bty = \"n\",\n       col = c(\"#555555\", \"#4daf4a\"),\n       legend = c(\"eBird checklists\", \"Wood Thrush sightings\"),\n       pch = 19)\nbox()\npar(new = TRUE, mar = c(0, 0, 3, 0))\ntitle(\"Wood Thrush eBird Observations\\nJune 2013-2022\")\n\n\n\n\n\n\n\n\nIn this map, the spatial bias in eBird data becomes immediately obvious, for example, notice the large number of checklists areas around Atlanta in the northern part of the state.\nExploring the effort variables is also a valuable exercise. For each effort variable, we’ll produce both a histogram and a plot of frequency of detection as a function of that effort variable. The histogram will tell us something about birder behavior. For example, what time of day are most people going birding, and for how long? We may also want to note values of the effort variable that have very few observations; predictions made in these regions may be unreliable due to a lack of data. The detection frequency plots tell us how the probability of detecting a species changes with effort.\n\n2.6.1 Time of day\nThe chance of an observer detecting a bird when present can be highly dependent on time of day. For example, many species exhibit a peak in detection early in the morning during dawn chorus and a secondary peak early in the evening. With this in mind, the first predictor of detection that we’ll explore is the time of day at which a checklist was started. We’ll summarize the data in 1 hour intervals, then plot them. Since estimates of detection frequency are unreliable when only a small number of checklists are available, we’ll only plot hours for which at least 100 checklists are present.\n\n# summarize data by hourly bins\nbreaks <- seq(0, 24)\nlabels <- breaks[-length(breaks)] + diff(breaks) / 2\nchecklists_time <- checklists %>% \n  mutate(hour_bins = cut(hours_of_day, \n                         breaks = breaks, \n                         labels = labels,\n                         include.lowest = TRUE),\n         hour_bins = as.numeric(as.character(hour_bins))) %>% \n  group_by(hour_bins) %>% \n  summarise(n_checklists = n(),\n            n_detected = sum(species_observed),\n            det_freq = mean(species_observed))\n\n# histogram\ng_tod_hist <- ggplot(checklists_time) +\n  aes(x = hour_bins, y = n_checklists) +\n  geom_segment(aes(xend = hour_bins, y = 0, yend = n_checklists),\n               color = \"grey50\") +\n  geom_point() +\n  scale_x_continuous(breaks = seq(0, 24, by = 3), limits = c(0, 24)) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(x = \"Hours since midnight\",\n       y = \"# checklists\",\n       title = \"Distribution of observation start times\")\n\n# frequency of detection\ng_tod_freq <- ggplot(checklists_time %>% filter(n_checklists > 100)) +\n  aes(x = hour_bins, y = det_freq) +\n  geom_line() +\n  geom_point() +\n  scale_x_continuous(breaks = seq(0, 24, by = 3), limits = c(0, 24)) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Hours since midnight\",\n       y = \"% checklists with detections\",\n       title = \"Detection frequency\")\n\n# combine\ngrid.arrange(g_tod_hist, g_tod_freq)\n\n\n\n\n\n\n\n\nAs expected, Wood Thrush detectability is highest early in the morning and quickly falls off as the day progresses. In later chapters, we’ll make predictions at the peak time of day for detectability to limit the effect of this variation. The majority of checklist submissions also occurs in the morning; however, there are reasonable numbers of checklists between 6am and 9pm. It’s in this region that our model estimates will be most reliable.\n\n\n2.6.2 Checklist duration\nWhen we initially extracted the eBird data in Section @ref(ebird-extract), we restricted observations to those from checklists 24 hours in duration or shorter to reduce variability. Let’s see what sort of variation remains in checklist duration.\n\n# summarize data by hour long bins\nbreaks <- seq(0, 24)\nlabels <- breaks[-length(breaks)] + diff(breaks) / 2\nchecklists_duration <- checklists %>% \n  mutate(duration_bins = cut(effort_hours, \n                             breaks = breaks, \n                             labels = labels,\n                             include.lowest = TRUE),\n         duration_bins = as.numeric(as.character(duration_bins))) %>% \n  group_by(duration_bins) %>% \n  summarise(n_checklists = n(),\n            n_detected = sum(species_observed),\n            det_freq = mean(species_observed))\n\n# histogram\ng_duration_hist <- ggplot(checklists_duration) +\n  aes(x = duration_bins, y = n_checklists) +\n  geom_segment(aes(xend = duration_bins, y = 0, yend = n_checklists),\n               color = \"grey50\") +\n  geom_point() +\n  scale_x_continuous(breaks = 0:5) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(x = \"Checklist duration (hours)\",\n       y = \"# checklists\",\n       title = \"Distribution of checklist durations\")\n\n# frequency of detection\ng_duration_freq <- ggplot(checklists_duration %>% filter(n_checklists > 100)) +\n  aes(x = duration_bins, y = det_freq) +\n  geom_line() +\n  geom_point() +\n  scale_x_continuous(breaks = 0:5) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Checklist duration (hours)\",\n       y = \"% checklists with detections\",\n       title = \"Detection frequency\")\n\n# combine\ngrid.arrange(g_duration_hist, g_duration_freq)\n\n\n\n\n\n\n\n\nThe majority of checklists are an hour or shorter and there is a rapid decline in the frequency of checklists with increasing duration. In addition, longer searches yield a higher chance of detecting a Wood Thrush. In many cases, there is a saturation effect, with searches beyond a given length producing little additional benefit; however, here there appears to be a drop off in detection for checklists longer than 3.5 hours.\n\n\n2.6.3 Distance traveled\nAs with checklist duration, we expect a priori that the greater the distance someone travels, the greater the probability of encountering at least one Wood Thrush. Let’s see if this expectation is met. Note that we have already truncated the data to checklists less than 10 km in length.\n\n# summarize data by 1 km bins\nbreaks <- seq(0, 10)\nlabels <- breaks[-length(breaks)] + diff(breaks) / 2\nchecklists_dist <- checklists %>% \n  mutate(dist_bins = cut(effort_distance_km, \n                         breaks = breaks, \n                         labels = labels,\n                         include.lowest = TRUE),\n         dist_bins = as.numeric(as.character(dist_bins))) %>% \n  group_by(dist_bins) %>% \n  summarise(n_checklists = n(),\n            n_detected = sum(species_observed),\n            det_freq = mean(species_observed))\n\n# histogram\ng_dist_hist <- ggplot(checklists_dist) +\n  aes(x = dist_bins, y = n_checklists) +\n  geom_segment(aes(xend = dist_bins, y = 0, yend = n_checklists),\n               color = \"grey50\") +\n  geom_point() +\n  scale_x_continuous(breaks = 0:5) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(x = \"Distance travelled (km)\",\n       y = \"# checklists\",\n       title = \"Distribution of distance travelled\")\n\n# frequency of detection\ng_dist_freq <- ggplot(checklists_dist %>% filter(n_checklists > 100)) +\n  aes(x = dist_bins, y = det_freq) +\n  geom_line() +\n  geom_point() +\n  scale_x_continuous(breaks = 0:5) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Distance travelled (km)\",\n       y = \"% checklists with detections\",\n       title = \"Detection frequency\")\n\n# combine\ngrid.arrange(g_dist_hist, g_dist_freq)\n\n\n\n\n\n\n\n\nAs with duration, the majority of observations are from short checklists (less than half a kilometer). One fortunate consequence of this is that most checklists will be contained within a small area within which habitat is not likely to show high variability. In chapter @ref{envvar}, we will summarize land cover data within circles 3 km in diameter, centered on each checklist, and it appears that the vast majority of checklists will stay contained within this area.\n\n\n2.6.4 Number of observers\nFinally, let’s consider the number of observers whose observation are being reported in each checklist. We expect that at least up to some number of observers, reporting rates will increase; however, in working with these data we have found cases of declining detection rates for very large groups. With this in mind we have already restricted checklists to those with 30 or fewer observers, thus removing the very largest groups (prior to filtering, some checklists had as many as 180 observers!).\n\n# summarize data\nbreaks <- seq(0, 10)\nlabels <- seq(1, 10)\nchecklists_obs <- checklists %>% \n  mutate(obs_bins = cut(number_observers, \n                        breaks = breaks, \n                        label = labels,\n                        include.lowest = TRUE),\n         obs_bins = as.numeric(as.character(obs_bins))) %>% \n  group_by(obs_bins) %>% \n  summarise(n_checklists = n(),\n            n_detected = sum(species_observed),\n            det_freq = mean(species_observed))\n\n# histogram\ng_obs_hist <- ggplot(checklists_obs) +\n  aes(x = obs_bins, y = n_checklists) +\n  geom_segment(aes(xend = obs_bins, y = 0, yend = n_checklists),\n               color = \"grey50\") +\n  geom_point() +\n  scale_x_continuous(breaks = breaks) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(x = \"# observers\",\n       y = \"# checklists\",\n       title = \"Distribution of the number of observers\")\n\n# frequency of detection\ng_obs_freq <- ggplot(checklists_obs %>% filter(n_checklists > 100)) +\n  aes(x = obs_bins, y = det_freq) +\n  geom_line() +\n  geom_point() +\n  scale_x_continuous(breaks = breaks) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"# observers\",\n       y = \"% checklists with detections\",\n       title = \"Detection frequency\")\n\n# combine\ngrid.arrange(g_obs_hist, g_obs_freq)\n\n\n\n\n\n\n\n\nThe majority of checklists have one or two observers and there appears to be an increase in detection frequency with more observers. However, it’s hard to distinguish a discernible pattern in the noise here, likely because there are so few checklists with more than 3 observers.\n\n\n\n\nKelling, Steve, Alison Johnston, Daniel Fink, Viviana Ruiz-Gutierrez, Rick Bonney, Aletta Bonn, Miguel Fernandez, et al. 2018. “Finding the Signal in the Noise of Citizen Science Observations.” bioRxiv, May, 326314. https://doi.org/10.1101/326314."
  },
  {
    "objectID": "envvar.html#envvar-intro",
    "href": "envvar.html#envvar-intro",
    "title": "3  Environmental Variables",
    "section": "3.1 Introduction",
    "text": "3.1 Introduction\nSpecies distribution models work by finding associations between species occurrence or abundance and environmental variables. Using these relationships, it’s possible to predict the distribution in areas that aren’t sampled, provided we know the value of the environmental variables in these areas. Therefore, to proceed with the modeling in the next several chapters, we’ll need a suite of environmental variables to be used as predictors in our models. The particular set of environmental variables that’s most suitable for a given study will depend on the focal species, region, and time period, as well as the availability of data. When species distributions are well defined by the environmental variables, extrapolations to unsurveyed areas will be more accurate. So, it’s worth considering which variables are important for your species and region.\nFortunately, there are an abundance of freely available, satellite-based environmental datasets that are suitable for species distribution modeling. A small subset of possible data sources available globally includes data describing landcover, elevation, topography, surface water, and intertidal habitat. However, the reader is encouraged to search for datasets suitable for their region and species of interest.\nSince there are such a wide range of available environmental datasets, and the distribution mechanisms and formats for each are different and often changing, we will not cover the specifics of how to download and pre-processing satellite-derived data products. Instead, we have downloaded and prepared example landcover and elevation datasets and will demonstrate how environmental variables can be extracted from these datasets in the following sections. This will provide examples of assigning environmental variables based on both categorical (landcover) and continuous (elevation) raster data sets.\nTo gain access to the example raster datasets, download the data package for by following the instructions in the Introduction."
  },
  {
    "objectID": "envvar.html#envvar-landcover",
    "href": "envvar.html#envvar-landcover",
    "title": "3  Environmental Variables",
    "section": "3.2 Landcover",
    "text": "3.2 Landcover\nFor the examples in this book, we’ll use land cover variables derived from the MODIS MCD12Q1 v006 land cover product (Friedl and Sulla-Menashe 2015). This product has global coverage at 500m spatial resolution and annual temporal resolution from 2001-2021. These data are available for several different classification schemes. We’ll use the FAO Land Cover Classification System (LCCS1), which provides a globally accurate classification of land cover in our experience. This system classifies pixels into one of 16 different land cover classes.\nThe 2013-2021 data for our focal region (i.e. Georgia) is the data package in the file data/modis_mcd12q1_fao_2013-2021.tif. This is multi-band GeoTIFF in which each band corresponds to a year of landcover data. In R, we’ll use the terra package package to work with raster datasets.\n\nlibrary(dplyr)\nlibrary(exactextractr)\nlibrary(landscapemetrics)\nlibrary(readr)\nlibrary(sf)\nlibrary(stringr)\nlibrary(terra)\nlibrary(tidyr)\nlibrary(units)\nlibrary(viridis)\n\n# load and inspect the landcover data\nlandcover <- rast(\"data/modis_mcd12q1_fao_2013-2021.tif\")\nprint(landcover)\n#> class       : SpatRaster \n#> dimensions  : 1173, 1249, 9  (nrow, ncol, nlyr)\n#> resolution  : 463, 463  (x, y)\n#> extent      : -8132528, -7553851, 3362724, 3906190  (xmin, xmax, ymin, ymax)\n#> coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#> source      : modis_mcd12q1_fao_2013-2021.tif \n#> names       : 2013, 2014, 2015, 2016, 2017, 2018, ... \n#> min values  :    1,    1,    1,    1,    1,    1, ... \n#> max values  :   43,   43,   43,   43,   43,   43, ...\n\n# map the data for 2021\nplot(as.factor(landcover[[\"2021\"]]), \n     main = \"MODIS Landcover 2021\",\n     axes = FALSE)\n\n\n\n\n\n\n\n\nWe’ve also included a lookup table in the data package (data/mcd12q1_fao_classes.csv) that provides descriptions of each of these classes.\n\nlc_classes <- read_csv(\"data/mcd12q1_fao_classes.csv\") %>% \n  select(class, name, description)\nlc_classes$label <- NULL\nknitr::kable(lc_classes)\n\n\n\n\n\n\n\n\n\nclass\nname\ndescription\n\n\n\n\n1\nBarren\nAt least of area 60% is non-vegetated barren (sand, rock, soil) or permanent snow/ice with less than 10% vegetation.\n\n\n2\nPermanent Snow and Ice\nAt least of area 60% is covered by snow and ice for at least 10 months of the year.\n\n\n3\nWater Bodies\nAt least 60% of area is covered by permanent water bodies.\n\n\n11\nEvergreen Needleleaf Forests\nDominated by evergreen conifer trees (>2m). Tree cover >60%.\n\n\n12\nEvergreen Broadleaf Forests\nDominated by evergreen broadleaf and palmate trees (>2m). Tree cover >60%.\n\n\n13\nDeciduous Needleleaf Forests\nDominated by deciduous needleleaf (larch) trees (>2m). Tree cover >60%.\n\n\n14\nDeciduous Broadleaf Forests\nDominated by deciduous broadleaf trees (>2m). Tree cover >60%.\n\n\n15\nMixed Broadleaf/Needleleaf Forests\nCo-dominated (40-60%) by broadleaf deciduous and evergreen needleleaf tree (>2m) types. Tree cover >60%.\n\n\n16\nMixed Broadleaf Evergreen/Deciduous Forests\nCo-dominated (40-60%) by broadleaf evergreen and deciduous tree (>2m) types. Tree cover >60%.\n\n\n21\nOpen Forests\nTree cover 30-60% (canopy >2m).\n\n\n22\nSparse Forests\nTree cover 10-30% (canopy >2m).\n\n\n31\nDense Herbaceous\nDominated by herbaceous annuals (<2m) at least 60% cover.\n\n\n32\nSparse Herbaceous\nDominated by herbaceous annuals (<2m) 10-60% cover.\n\n\n41\nDense Shrublands\nDominated by woody perennials (1-2m) >60% cover.\n\n\n42\nShrubland/Grassland Mosaics\nDominated by woody perennials (1-2m) 10-60% cover with dense herbaceous annual understory.\n\n\n43\nSparse Shrublands\nDominated by woody perennials (1-2m) 10-60% cover with minimal herbaceous understory.\n\n\n255\nUnclassified\nHas not received a map label because of missing inputs.\n\n\n\n\n\nAt this point we could use the MODIS land cover data directly, simply extracting the land cover class for each checklist location. However, we instead advocate summarizing the land cover data within a neighborhood around the checklist locations. As discussed in Section @ref(intro-intro), checklist locations are not precise, so it’s more appropriate to use the habitat in the surrounding area, rather than only at the checklist location. More fundamentally, organisms interact with their environment not at a single point, but at the scale of a landscape, so it’s important to include habitat information characterizing a suitably-sized landscape around the observation location. Based on our experience working with eBird data, a 3 km diameter circular neighborhood centered on each checklist location is sufficient to account for the spatial precision in the data when the maximum distance of travelling counts has been limited to 10 km, while also being a relevant ecological scale for many bird species.\nThere are a variety of landscape metrics that can be used to characterize the composition (what habitat is available) and configuration (how that habitat is arranged spatially) of landscapes. Many of these metrics can be calculated using the R package landscapemetrics. We’ll use two simple metrics to summarize landcover data in this book: percent landcover, a measure of composition, and edge density, a measure of configuration. For each landcover class, Percent landcover (abbreviated as pland) is the percent of the landscape that is composed of that class and edge density (abbreviated as ed) is the total boundary length of all patches of that class per unit area. For a broad range of scenarios, these two metrics are a reliable choice for calculating environmental covariates in distribution modeling.\nWe’ll start by finding the full set of unique checklists locations for each year in the eBird data and buffer the points by 1.5km to generate 3km diameter circular neighborhoods centered on each checklist location. Note that the landcover data are not available for 2022, so we use the 2021 landcover data for 2022 checklists.\n\n# ebird checklist locations\nchecklists <- read_csv(\"data/checklists-zf_woothr_june_us-ga.csv\") %>% \n  # landcover data not availble for the full period, so we use the closest year\n  mutate(year_lc = as.character(pmin(year, 2021)))\n\n# generate circular neighborhoods for all checkists\nbuffers <- checklists %>% \n  # identify unique location/year combinations\n  distinct(locality_id, year_lc, latitude, longitude) %>% \n  # generate a 3km neighborhoods\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>% \n  st_buffer(dist = set_units(1.5, \"km\"))\n\nNext, for each location, we crop and mask the landcover layer corresponding to the checklist year to the circular neighborhood around that checklist. Then we use calculate_lsm() from landscapemetrics to calculate pland and ed metrics within each neighborhood. This step may take 30 minute or longer to run.\n\nlsm <- NULL\nfor (i in seq_len(nrow(buffers))) {\n  buffer_i <- st_transform(buffers[i, ], crs = crs(landcover))\n  year <- as.character(buffer_i$year_lc)\n  \n  # crop and mask landcover raster so all values outside buffer are missing\n  lsm[[i]] <- crop(landcover[[year]], buffer_i) %>% \n    mask(buffer_i) %>% \n    # calcualte landscape metrics\n    calculate_lsm(level = \"class\", metric = c(\"pland\", \"ed\")) %>% \n    # add variables to uniquely identify each point\n    mutate(locality_id = buffer_i$locality_id, \n           year_lc = buffer_i$year_lc)\n}\nlsm <- bind_rows(lsm) %>% \n  select(locality_id, year_lc, class, metric, value)\n\nFinally, we’ll transform the data frame so there’s one row per location and all the environmental variables appear as columns. For each location, any landcover classes that don’t appear within the buffer will not have associated pland and ed metrics; at this stage, we replace these implicit missing values with zeros using the complete list of classes in lc_classes.\n\nlsm_wide <- lsm %>% \n  # fill missing classes with zeros\n  complete(nesting(locality_id, year_lc),\n           class = lc_classes$class,\n           metric = c(\"ed\", \"pland\"),\n           fill = list(value = 0)) %>% \n  # transform from long to wide format\n  pivot_wider(values_from = value,\n              names_from = c(class, metric),\n              names_glue = \"landcover_c{str_pad(class, 2, pad = '0')}_{metric}\",\n              names_sort = TRUE) %>% \n  arrange(locality_id, year_lc)"
  },
  {
    "objectID": "envvar.html#envvar-elevation",
    "href": "envvar.html#envvar-elevation",
    "title": "3  Environmental Variables",
    "section": "3.3 Elevation",
    "text": "3.3 Elevation\nIn this section we’ll demonstrate how to assign elevation to each checklist, which frequently plays an important role in shaping species distributions. Amatulli et al. (2018) provide a suite of global, 1km resolution topographic variables designed for use in distribution modeling. A range of variables are available, including elevation, slope, roughness, and many others; we’ll focus on elevation here, but the approach can easily be applied to other variables.\nTo access the data, visit the website for these data, download the 1 km resolution median elevation product, and save the file (elevation_1KMmd_GMTEDmd.tif) in the data/ subdirectory of your RStudio project. If you’re unable to download the data, we’ve also provided a small subset of the data covering our study extent in the data package.\nAnalogous to how we assigned landcover variables, we’ll calculate the mean and standard deviation of the elevation within 3km diameter circular neighborhoods centered on each checklist location.\n\n# elevation raster\nelevation <- rast(\"data/elevation_1KMmd_GMTEDmd.tif\")\n\n# mean and standard deviation within each circular neighborhood\nelev_buffer <- exact_extract(elevation, buffers, fun = c(\"mean\", \"stdev\"),\n                             progress = FALSE) %>% \n  # add variables to uniquely identify each point\n  mutate(locality_id = buffers$locality_id, year_lc = buffers$year_lc) %>% \n  select(locality_id, year_lc, \n         elevation_mean = mean,\n         elevation_sd = stdev)\n\nNow, let’s combine the landcover and elevation variables together, join them back to the checklist data, and save them as model predictors in the upcoming chapters.\n\n# combine elevation and landcover\nenv_variables <- inner_join(elev_buffer, lsm_wide,\n                            by = c(\"locality_id\", \"year_lc\"))\n\n# attach and expand to checklists\nenv_variables <- checklists %>% \n  select(checklist_id, locality_id, year_lc) %>% \n  inner_join(env_variables, by = c(\"locality_id\", \"year_lc\")) %>% \n  select(-locality_id, -year_lc)\n\n# save to csv\nwrite_csv(env_variables, \n          \"data/environmental-variables_checklists.csv\", \n          na = \"\")"
  },
  {
    "objectID": "envvar.html#envvar-pred",
    "href": "envvar.html#envvar-pred",
    "title": "3  Environmental Variables",
    "section": "3.4 Prediction surface",
    "text": "3.4 Prediction surface\nAfter training a species distribution model, the goal is typically to make predictions throughout the study area. To do this, we’ll need a prediction surface: a regular grid of habitat covariates over which to make predictions. In this section, we’ll create such a prediction surface for our study region (Georgia) using the MODIS land cover data from the most recent year for which they’re available in addition to elevation data. To start, we’ll create a template raster with cells equal in dimension to the diameter of the circular neighborhoods we used above. It’s important to use an equal area coordinate reference system for the prediction surface; we’ll use a Lambert’s azimuthal equal area projection centered on our study region.\n\n# lambert's azimuthal equal area projection for georgia\nlaea_crs <- st_crs(\"+proj=laea +lat_0=32.5 +lon_0=-83.5\")\n\n# study region: georgia\nstudy_region <- read_sf(\"data/gis-data.gpkg\", layer = \"ne_states\") %>% \n  filter(state_code == \"US-GA\") %>% \n  st_transform(crs = laea_crs)\n\n# create a raster template covering the region with 3km resolution\nr <- rast(study_region, res = c(3000, 3000))\n\n# fill the raster with 1s inside the study region\nr <- rasterize(study_region, r, values = 1) %>% \n  setNames(\"study_region\")\n\n# save for later use\nr <- writeRaster(r, \"data/prediction-surface.tif\",\n                 overwrite = TRUE,\n                 gdal = \"COMPRESS=DEFLATE\")\n\nNext, we extract the coordinates of the cell centers from the raster we just created, convert these to sf point features, and buffer these to generate 3km circular neighborhoods.\n\n# generate neighborhoods for the prediction surface cell centers\nbuffers_ps <- as.data.frame(r, cells = TRUE, xy = TRUE) %>% \n  select(cell_id = cell, x, y) %>% \n  st_as_sf(coords = c(\"x\", \"y\"), crs = laea_crs, remove = FALSE) %>% \n  st_transform(crs = 4326) %>% \n  st_buffer(set_units(3, \"km\"))\n\nNow we can calculate the landcover and elevation variables exactly as we did for the eBird checklists in the previous two sections. First, the landscape metrics pland and ed from the landcover data. Note that we use the most recent year of landcover data (i.e. 2021) in this case.\n\n# estimate landscape metrics for each cell in the prediction surface\nlsm_ps <- NULL\nfor (i in seq_len(nrow(buffers_ps))) {\n  buffer_i <- st_transform(buffers_ps[i, ], crs = crs(landcover))\n  \n  # crop and mask landcover raster so all values outside buffer are missing\n  lsm_ps[[i]] <- crop(landcover[[\"2021\"]], buffer_i) %>% \n    mask(buffer_i) %>% \n    # calcualte landscape metrics\n    calculate_lsm(level = \"class\", metric = c(\"pland\", \"ed\")) %>% \n    # add variable to uniquely identify each point\n    mutate(cell_id = buffer_i$cell_id)\n}\nlsm_ps <- bind_rows(lsm_ps) %>% \n  select(cell_id, class, metric, value)\n\n# transform to wide format\nlsm_wide_ps <- lsm_ps %>% \n  # fill missing classes with zeros\n  complete(cell_id,\n           class = lc_classes$class,\n           metric = c(\"ed\", \"pland\"),\n           fill = list(value = 0)) %>% \n  # transform from long to wide format\n  pivot_wider(values_from = value,\n              names_from = c(class, metric),\n              names_glue = \"landcover_c{str_pad(class, 2, pad = '0')}_{metric}\",\n              names_sort = TRUE,\n              values_fill = 0) %>% \n  arrange(cell_id)\n\nAnd now the mean and standard deviation of elevation.\n\nelev_buffer_ps <- exact_extract(elevation, buffers_ps, \n                                fun = c(\"mean\", \"stdev\"),\n                                progress = FALSE) %>% \n  # add variables to uniquely identify each point\n  mutate(cell_id = buffers_ps$cell_id) %>% \n  select(cell_id, elevation_mean = mean, elevation_sd = stdev)\n\nFinally, we combine the landcover and elevation variables together and save to CSV.\n\n# combine landcover and elevation\nenv_variables_ps <- inner_join(elev_buffer_ps, lsm_wide_ps, by = \"cell_id\")\n\n# attach the xy coordinates of the cell centers\nenv_variables_ps <- buffers_ps %>% \n  st_drop_geometry() %>% \n  select(cell_id, x, y) %>% \n  inner_join(env_variables_ps, by = \"cell_id\")\n\n# save as csv\nwrite_csv(env_variables_ps, \n          \"data/environmental-variables_prediction-surface.csv\", \n          na = \"\")\n\nKeeping these data in a data frame is a compact way to store them and will be required once we make model predictions in later chapters. However, we can always use the raster template to convert these environmental variables into a spatial format, for example, if we want to map them. Let’s look at how this works for percent landcover of class 14: deciduous broadleaf forest.\n\nforest_cover <- env_variables_ps %>% \n  # convert to spatial features\n  st_as_sf(coords = c(\"x\", \"y\"), crs = laea_crs) %>% \n  # rasterize points\n  rasterize(r, field = \"landcover_c14_pland\")\n\n# make a map\npar(mar = c(0.25, 0.25, 2, 0.25))\nplot(forest_cover, \n     axes = FALSE, box = FALSE, col = viridis(10), \n     main = paste(\"Percent Deciduous Broadleaf Forest\\n\",\n                  \"2021 MODIS Landcover\"))\n\n\n\n\n\n\n\n\n\n\n\n\nAmatulli, Giuseppe, Sami Domisch, Mao-Ning Tuanmu, Benoit Parmentier, Ajay Ranipeta, Jeremy Malczyk, and Walter Jetz. 2018. “A Suite of Global, Cross-Scale Topographic Variables for Environmental and Biodiversity Modeling.” Scientific Data 5 (March): 180040. https://doi.org/10.1038/sdata.2018.40.\n\n\nFriedl, Mark, and Damien Sulla-Menashe. 2015. “MCD12Q1 MODIS/Terra+Aqua Land Cover Type Yearly L3 Global 500m SIN Grid V006.” NASA EOSDIS Land Processes DAAC. https://doi.org/10.5067/MODIS/MCD12Q1.006."
  },
  {
    "objectID": "encounter.html#encouter-intro",
    "href": "encounter.html#encouter-intro",
    "title": "4  Modeling Encounter Rate",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\nIn this chapter we’ll estimate the encounter rate of Wood Thrush on eBird checklists in June in the state of Georgia. We define encounter rate as measuring the probability of an eBirder encountering a species on a standard eBird checklist.\nThe ecological metric we’re ultimately interested in is the probability that a species occurs at a site (i.e. the occupancy probability). This is usually not possible to estimate with semi-structured citizen science data like those from eBird because we typically can’t estimate absolute detectability. However, by accounting for much of the variation in detectability by including effort covariates in our model, the remaining unaccounted detectability will be more consistent across sites (Guillera-Arroita et al. 2015). Therefore, the encounter rate metric will be proportional to occupancy, albeit lower by some consistent amount. For some easily detectable species the difference between occurrence and actual occupancy rate will be small, and these encounter rates will approximate the actual occupancy rates of the species. For harder to detect species, the encounter rate may be substantially lower than the occupancy rate.\nRandom forests are a general purpose machine learning method applicable to a wide range of classification and regression problems, including the task at hand: classifying detection and non-detection of a species on eBird checklists. In addition to having good predictive performance, random forests are reasonably easy to use and have several efficient implementations in R. Prior to fitting a random forest model, we’ll demonstrate how to address issues of class imbalance and spatial bias using spatial subsampling on a regular grid. After fitting the model, we’ll assess its performance using a subset of data put aside for testing, and calibrate the model to ensure predictions are accurate. Finally, we’ll predict encounter rates throughout the study area and produce maps of these predictions."
  },
  {
    "objectID": "encounter.html#encounter-data",
    "href": "encounter.html#encounter-data",
    "title": "4  Modeling Encounter Rate",
    "section": "4.2 Data preparation",
    "text": "4.2 Data preparation\nLet’s get started by loading the necessary packages and data. If you worked through the previous chapters, you should have all the data required for this chapter. However, you may want to download the data package, and unzip it to your project directory, to ensure you’re working with exactly the same data as was used in the creation of this book.\n\nlibrary(ebirdst)\nlibrary(fields)\nlibrary(gridExtra)\nlibrary(mccf1)\nlibrary(PresenceAbsence)\nlibrary(ranger)\nlibrary(scam)\nlibrary(sf)\nlibrary(terra)\nlibrary(verification)\nlibrary(tidyverse)\n\n# set random number seed to insure fully repeatable results\nset.seed(1)\n\n# setup results directory for saved results\ndir.create(\"results/\", showWarnings = FALSE, recursive = )\n\n# habitat variables: landcover and elevation\nhabitat <- read_csv(\"data/environmental-variables_checklists.csv\")\n\n# zero-filled ebird data combined with habitat data\nchecklists <- read_csv(\"data/checklists-zf_woothr_june_us-ga.csv\") %>% \n  inner_join(habitat, by = \"checklist_id\")\n\n# prediction surface\npred_surface <- read_csv(\"data/environmental-variables_prediction-surface.csv\")\nr <- rast(\"data/prediction-surface.tif\") %>% \n  # this second rast() call removes all the values from the raster template\n  rast()\ncrs <- st_crs(r)\n\n# load gis data for making maps\nstudy_region <- read_sf(\"data/gis-data.gpkg\", \"ne_states\") %>% \n  filter(state_code == \"US-GA\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()\nne_land <- read_sf(\"data/gis-data.gpkg\", \"ne_land\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()\nne_country_lines <- read_sf(\"data/gis-data.gpkg\", \"ne_country_lines\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()\nne_state_lines <- read_sf(\"data/gis-data.gpkg\", \"ne_state_lines\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()"
  },
  {
    "objectID": "encounter.html#encounter-sss",
    "href": "encounter.html#encounter-sss",
    "title": "4  Modeling Encounter Rate",
    "section": "4.3 Spatiotemporal subsampling",
    "text": "4.3 Spatiotemporal subsampling\nAs discussed in the introduction, three of the challenges faced when using eBird data, are spatial bias, temporal bias, and class imbalance. Spatial and temporal bias refers to the tendency of eBird checklists to be distributed non-randomly in space and time, while class imbalance is the phenomenon that there are many more non-detections than detections for most species. All three can impact our ability to make reliable inferences from these data. Fortunately, all three can largely be addressed through subsampling the eBird data prior to modeling. In particular, we define an equal area, 3km by 3km square grid across the study region, then subsample detections and non-detections independently to ensure that we don’t lose too many detections. To address temporal bias, we’ll sample one detection and one non-detection checklist from each grid cell for each week of each year. Fortunately, the package ebirdst has a function grid_sample_stratified() that is specifically design to perform this type of sampling on eBird checklist data.\nBefore working with the real data, it’s instructive to look at a simple toy example, to see how this subsampling process works.\n\n# generate random points for a single week of the year\npts <- data.frame(longitude = runif(500, -0.1, 0.1),\n                  latitude = runif(500, -0.1, 0.1),\n                  day_of_year = sample(1:7, 500, replace = TRUE))\n\n# sample one checklist per grid cell\n# by default grid_sample() uses a 3km x 3km x 1 week grid\npts_ss <- grid_sample(pts)\n\n# generate polygons for the grid cells\nggplot(pts) +\n  aes(x = longitude, y = latitude) +\n  geom_point(size = 0.5) +\n  geom_point(data = pts_ss, col = \"red\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nIn the above plot, the full set of points is shown in black and the subsampled points are shown in red. Now let’s apply exactly the same approach to subsampling the real eBird checklists; however, now we subsample temporally in addition to spatially, and sample detections and non-detections separately.\n\n# sample one checklist per 3km x 3km x 1 week grid for each year\n# sample detection/non-detection independently \nchecklists_ss <- grid_sample_stratified(checklists,\n                                        obs_column = \"species_observed\")\n\nHow did this impact the prevalence of detections compared to non-detections?\n\n# original data\nnrow(checklists)\n#> [1] 43921\ncount(checklists, species_observed) %>% \n  mutate(percent = n / sum(n))\n#> # A tibble: 2 × 3\n#>   species_observed     n percent\n#>   <lgl>            <int>   <dbl>\n#> 1 FALSE            39522   0.900\n#> 2 TRUE              4399   0.100\n\n# after sampling\nnrow(checklists_ss)\n#> [1] 16236\ncount(checklists_ss, species_observed) %>% \n  mutate(percent = n / sum(n))\n#> # A tibble: 2 × 3\n#>   species_observed     n percent\n#>   <lgl>            <int>   <dbl>\n#> 1 FALSE            13911   0.857\n#> 2 TRUE              2325   0.143\n\nSo, the subsampling decreased the overall number of checklists by a factor of about four, but increased the prevalence of detections from 10.0% to 14.3%. This increase in detections will help the random forest model distinguish where birds are being observed; however, this does affect the prevalence rate of the detections in the data. As a result, the estimated probability of occurrence based on these subsampled data will be larger than the true occurrence rate. When examining the outputs from the models it will be important to recall that we altered the prevalence rate at this stage. Now let’s look at how the subsampling affects the spatial distribution of the observations.\n\n# convert checklists to spatial features\nall_pts <- checklists %>%  \n  st_as_sf(coords = c(\"longitude\",\"latitude\"), crs = 4326) %>%\n  st_transform(crs = crs) %>% \n  select(species_observed)\nss_pts <- checklists_ss %>%  \n  st_as_sf(coords = c(\"longitude\",\"latitude\"), crs = 4326) %>%\n  st_transform(crs = crs) %>% \n  select(species_observed)\nboth_pts <- list(before_ss = all_pts, after_ss = ss_pts)\n\n# map\np <- par(mfrow = c(1, 2))\nfor (i in seq_along(both_pts)) {\n  par(mar = c(0.25, 0.25, 0.25, 0.25))\n  # set up plot area\n  plot(st_geometry(both_pts[[i]]), col = NA)\n  # contextual gis data\n  plot(ne_land, col = \"#dddddd\", border = \"#888888\", lwd = 0.5, add = TRUE)\n  plot(study_region, col = \"#cccccc\", border = NA, add = TRUE)\n  plot(ne_state_lines, col = \"#ffffff\", lwd = 0.75, add = TRUE)\n  plot(ne_country_lines, col = \"#ffffff\", lwd = 1.5, add = TRUE)\n  # ebird observations\n  # not observed\n  plot(st_geometry(both_pts[[i]]),\n       pch = 19, cex = 0.1, col = alpha(\"#555555\", 0.25),\n       add = TRUE)\n  # observed\n  plot(filter(both_pts[[i]], species_observed) %>% st_geometry(),\n       pch = 19, cex = 0.3, col = alpha(\"#4daf4a\", 0.5),\n       add = TRUE)\n  # legend\n  legend(\"bottomright\", bty = \"n\",\n         col = c(\"#555555\", \"#4daf4a\"),\n         legend = c(\"Non-detection\", \"Detection\"),\n         pch = 19)\n  box()\n  par(new = TRUE, mar = c(0, 0, 3, 0))\n  if (names(both_pts)[i] == \"before_ss\") {\n    title(\"Wood Thrush eBird Observations\\nBefore subsampling\")\n  } else {\n    title(\"After subsampling\")\n  }\n}\npar(p)\n\n\n\n\n\n\n\n\nFor Wood Thrush, subsampling the detections and non-detections independently is sufficient for dealing with class imbalance. You can assess the impact of class imbalance by looking at the prevalence rates and examining whether the models are good at predicting to validation data. For species that are extremely rare, it may be worthwhile considering keeping all detections or even oversampling detections (Robinson, Ruiz-Gutierrez, and Fink 2018). In doing this, be aware that some of your species detections will not be independent, which could lead to overfitting of the data. Overall, when thinking about the number of detections and the prevalence rate, it’s important to consider both the ecology and detectability of the focal species, and the behavior of observers towards this species."
  },
  {
    "objectID": "encounter.html#encounter-rf",
    "href": "encounter.html#encounter-rf",
    "title": "4  Modeling Encounter Rate",
    "section": "4.4 Random forests",
    "text": "4.4 Random forests\nNow we’ll use a random forest model to relate detection/non-detection of Wood Thrush to the habitat covariates (MODIS land cover and elevation), while also accounting for variation in detectability by including a suite of effort covariates. Before we fit the random forest model, we randomly split the data into 80% of checklists for training and 20% for testing. We’ll hold this 20% aside when we fit the model, then use it as an independent data set to test the predictive performance of the model.\n\ntrain_test <- checklists_ss %>% \n  # select only the columns to be used in the model\n  select(species_observed,\n         year, day_of_year, hours_of_day,\n         effort_hours, effort_distance_km, number_observers, \n         starts_with(\"landcover_\"),\n         starts_with(\"elevation_\")) %>% \n  drop_na() %>% \n  # split into 80/20 test/train\n  split(if_else(runif(nrow(.)) <= 0.8, \"train\", \"test\"))\nmap_int(train_test, nrow)\n#>  test train \n#>  3211 13024\n\nAlthough we were able to partially address the issue of class imbalance via subsampling, detections still only make up 14.3% of observations, and for rare species this number will be even lower. Most classification algorithms aim to minimize the overall error rate, which results in poor predictive performance for rare classes (Chen, Liaw, and Breiman 2004). To address this issue, we’ll use a balanced random forest approach, a modification of the traditional random forest algorithm designed to handle imbalanced data. In this approach, each of the trees that makes up the random forest is generated using a random sample of the data chosen such that there is an equal number of the detections (the rare class) and non-detections (the common class). To use this approach, we’ll need to calculate the proportion of detections in the dataset.\n\ndetection_freq <- mean(train_test$train$species_observed)\n\nThere are several packages for fitting random forests in R; however, we’ll use ranger, which is a blazingly fast implementation with all the features we need. To fit a balanced random forest, we use the sample.fraction parameter to instruct ranger to grow each tree based on a random sample of the data that has an equal number of detections and non-detections. Specifying this is somewhat obtuse, because we need to tell ranger the proportion of the total data set to sample for non-detections and detections, and when this proportion is the same as the proportion of the rarer class–the detections–then then ranger will sample from all of the rarer class but from an equally sized subset of the more common non-detections. We use replace = TRUE to ensure that it’s a bootstrap sample. We’ll also ask ranger to predict probabilities, rather than simply returning the most probable class, with probability = TRUE.\n\n# ranger requires a factor response to do classification\ner_model <- ranger(formula =  as.factor(species_observed) ~ ., \n                   data = train_test$train,\n                   importance = \"impurity\",\n                   probability = TRUE,\n                   replace = TRUE, \n                   sample.fraction = c(detection_freq, detection_freq))\n\n\n4.4.1 Calibration\nFor various reasons, the predicted probabilities from models do not always align with the observed frequencies of detections. For example, we would hope that if we look at all sites with a estimated probability of encounter of 0.2, that 20% of these would record the species. However, these probabilities are not always so well aligned. This will clearly be the case in our example, because we have deliberately inflated the prevalence of detection records in the data through the spatiotemporal subsampling process. We can produce a calibration of the predictions, which can be a useful diagnostic tool to understand the model predictions, and in some cases can be used to realign the predictions with observations. For information on calibration in species distribution models see Vaughan and Ormerod (2005) and for more fundamental references on calibration see Platt (1999), Murphy (1973), and Niculescu-Mizil and Caruana (2005).\nTo view the calibration of our model results, we predict encounter rate for each checklist in the training set, then fit a binomial Generalized Additive Model (GAM) with the real observed encounter rate as the response and the predicted encounter rate as the predictor variable. Whereas GLMs fit a linear relationship between a response and predictors, GAMs allow non-linear relationships. Although GAMs provide a degree of flexibility, in some situations they may overfit and provide unrealistic and unhelpful calibrations. We have a strong a priori expectation that higher real values will also be associated with higher estimated encounter rates. In order to maintain the ranking of predictions, it is important that we respect this ordering and to do this we’ll use a GAM that is constrained to only increase. To fit the GAM, we’ll use the R package scam, so the shape can be constrained to be monotonically increasing. Note that predictions from ranger are in the form of a matrix of probabilities for each class, and we want the probability of detections, which is the second column of this matrix.\n\n# predicted encounter rate predictions based on out of bag samples\ner_pred <- er_model$predictions[, 2]\n# observed detection, converted back from factor\ndet_obs <- as.integer(train_test$train$species_observed)\n# construct a data frame to train the scam model\nobs_pred <- tibble(obs = det_obs, pred = er_pred) %>% \n  drop_na()\n\n# fit calibration model\ncalibration_model <- scam(obs ~ s(pred, k = 6, bs = \"mpi\"), \n                          gamma = 2,\n                          data = obs_pred)\n\nTo use the calibration model as a diagnostic tool, we’ll group the predicted encounter rates into bins, then calculate the mean predicted and observed encounter rates within each bin. This can be compared to predictions from the calibration model.\n\n# group the predicted encounter rate into bins of width 0.02\n# then calculate the mean observed encounter rates in each bin\ner_breaks <- seq(0, 1, by = 0.02)\nmean_er <- obs_pred %>%\n  mutate(er_bin = cut(pred, breaks = er_breaks, include.lowest = TRUE)) %>%\n  group_by(er_bin) %>%\n  summarise(n_checklists = n(),\n            pred = mean(pred), \n            obs = mean(obs),\n            .groups = \"drop\")\n\n# make predictions from the calibration model\ncal_pred <- data.frame(pred = er_breaks)\ncal_pred <- predict(calibration_model, cal_pred, type = \"response\") %>% \n  bind_cols(cal_pred, calibrated = .)\n\n# compared binned mean encouter rates to calibration model\nggplot(cal_pred) +\n  aes(x = pred, y = calibrated) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n  geom_line(color = \"blue\") +\n  geom_point(data = mean_er, \n             aes(x = pred, y = obs),\n             size = 2, alpha = 0.6,\n             show.legend = FALSE) +\n  labs(x = \"Estimated encounter rate\",\n       y = \"Observed encounter rate\",\n       title = \"Calibration model\") +\n  coord_equal(xlim = c(0, 1), ylim = c(0, 1))\n\n\n\n\n\n\n\n\nFrom this plot we can clearly see that the estimated encounter rates are mostly much larger than the observed encounter rates (all points fall below the dashed \\(x = y\\) line. So we see that the model is not well calibrated. However, we do see from the points that the relative ranking of predictions is largely good: sites with estimated higher encounter rate do mostly have higher observed encounter rates.\nFrom this we have learnt that the model is good at distinguishing sites with high rates from those with low rates. For those readers familiar with using AUC scores to assess the quality of species distribution models, the graph is telling us that the model should have a high AUC value. However, the model is not so good at estimating encounter rates accurately.\nIf accurate encounter rates are required, and the calibration model is strong (close fit of points to the line in the figure above), then the calibration model can be used to calibrate the estimates from the random forest model, so they are adjusted to match the observed encounter rates more closely. The calibrated random forest model is the combination of the original random forest model followed by the calibration model.\nIf you’re using this model to calibrate your estimates, notice that the calibration curve can produce probabilities greater than 1 and less than 0, so when applying the calibration we also need to restrict the predictions to be between 0 and 1. It’s possible to run a logistic regression for the calibration to remove these predictions less than 0 or greater than 1; however, we’ve found the Gaussian constrained GAM to be more stable than the logistic constrained GAM.\n\n\n4.4.2 Thresholding\nThe random forest model produces continuous estimates of encounter rate from 0-1. However, for many applications, including assessing model performance, we’ll need to reclassify this continuous probability to a binary presence/absence estimate. This reclassification is done by setting a threshold above which the species is predicted to be absent. The threshold is typically chosen to maximize a performance metric such as the Kappa statistic or the area under the ROC curve. However, for class imbalanced data, such as eBird data where non-detections are much more common, many of these metrics can inflate performance by over-weighting the more common class (Cao, Chicco, and Hoffman 2020). To mitigate these issues, we suggest a threshold setting method using the MCC-F1 curve. This method plots Matthews correlation coefficient (MCC) against the F1 score for a range of possible threshold, then chooses the threshold where the curve is closest to the point of perfect performance. The R packge mccf1 implements the method.\n\n# mcc and fscore calculation for various thresholds\nmcc_f1 <- mccf1(\n  # observed detection/non-detection\n  response = obs_pred$obs,\n  # predicted encounter rate from random forest\n  predictor = obs_pred$pred)\n\n# identify best threshold\nmcc_f1_summary <- summary(mcc_f1)\n#>  mccf1_metric best_threshold\n#>         0.395           0.56\nthreshold <- mcc_f1_summary$best_threshold[1]\n\n\n\n4.4.3 Assessment\nTo assess the quality of the calibrated random forest model, we’ll validate the model’s ability to predict the observed patterns of detection using independent validation data (i.e. the 20% test data set). We’ll use a range of predictive performance metrics to compare the predictions to the actual observations: mean squared error (MSE), sensitivity, specificity, AUC, Kappa, F1 score, and MCC. Several of these metrics require the predicted probabilities to be classified into detection/non-detection.\n\n# predict on test data using random forest model\npred_er <- predict(er_model, data = train_test$test, type = \"response\")\n# extract probability of detection\npred_er <- pred_er$predictions[, 2]\n# convert to binary using the threshold\npred_binary <- pred_er > threshold\n# calibrate\npred_calibrated <- predict(calibration_model, \n                           newdata = data.frame(pred = pred_er), \n                           type = \"response\") %>% \n  as.numeric()\nobs_pred_test <- data.frame(id = seq_along(pred_calibrated),\n                            # actual detection/non-detection\n                            obs = train_test$test$species_observed,\n                            # binary detection/on-detection prediction\n                            pred_binary = pred_binary,\n                            # calibrated encounter rate\n                            pred_calibrated = pred_calibrated) %>%\n  # constrain probabilities to 0-1\n  mutate(pred_calibrated = pmin(pmax(pred_calibrated, 0), 1)) %>% \n  drop_na()\n\n# mean squared error (mse)\nmse <- mean((obs_pred_test$obs - obs_pred_test$pred_calibrated)^2, na.rm = TRUE)\n\n# calculate metrics for binary prediction: auc, kappa, sensitivity, specificity\npa_metrics <- obs_pred_test %>% \n  select(id, obs, pred_binary) %>% \n  presence.absence.accuracy(na.rm = TRUE, st.dev = FALSE)\n\n# mcc and f1\nmcc_f1 <- calculate_mcc_f1(obs_pred_test$obs, obs_pred_test$pred_binary)\n\n# combine metrics together\nrf_assessment <- tibble(\n  mse = mse,\n  sensitivity = pa_metrics$sensitivity,\n  specificity = pa_metrics$specificity,\n  auc = pa_metrics$AUC,\n  kappa = pa_metrics$Kappa,\n  mcc = mcc_f1$mcc,\n  f1 = mcc_f1$f1\n)\nknitr::kable(pivot_longer(rf_assessment, everything()), \n             digits = 3)\n\n\n\n\nname\nvalue\n\n\n\n\nmse\n0.103\n\n\nsensitivity\n0.568\n\n\nspecificity\n0.854\n\n\nauc\n0.711\n\n\nkappa\n0.364\n\n\nmcc\n0.371\n\n\nf1\n0.476\n\n\n\n\n\nEach of these metrics can inform us about different aspects of the model fit. The objectives of your study will determine which of these metrics is most important. For example, if you want to ensure that the model definitely includes all areas where the species occurs, you would seek to have high sensitivity. Alternatively, if you want to ensure that the species does indeed occur in all places the model predicts the species to occurr (for example, when identifying areas for conservation action), you would seek to maximise specificity."
  },
  {
    "objectID": "encounter.html#encounter-habitat",
    "href": "encounter.html#encounter-habitat",
    "title": "4  Modeling Encounter Rate",
    "section": "4.5 Habitat associations",
    "text": "4.5 Habitat associations\nFrom the random forest model, we can glean two important sources of information about the association between Wood Thrush detection and features of their local environment. First, predictor importance is a measure of the predictive power of each variable used as a predictor in the model, and is calculated as a byproduct of fitting a random forest model. Second, partial dependence plots estimate the marginal effect of one predictor holding all other predictors constant.\n\n4.5.1 Predictor importance\nDuring the process of fitting a random forest model, some variables are removed at each node of the trees that make up the random forest. Predictor importance is based on the mean decrease in accuracy of the model when a given predictor is not used. It’s technically an average Gini index, but essentially larger values indicate that a predictor is more important to the model.\n\npi <- enframe(er_model$variable.importance, \"predictor\", \"importance\") %>% \n  # only show the top 20\n  slice_max(order_by = importance, n = 20)\n# plot\nggplot(pi) + \n  aes(x = fct_reorder(predictor, importance), y = importance) +\n  geom_col() +\n  geom_hline(yintercept = 0, linewidth = 2, colour = \"#555555\") +\n  scale_y_continuous(expand = c(0, 0)) +\n  coord_flip() +\n  labs(x = NULL, \n       y = \"Predictor Importance (Gini Index)\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank(),\n        panel.grid.major.x = element_line(colour = \"#cccccc\", linewidth = 0.5))\n\n\n\n\n\n\n\n\nThe most important predictors of detection/non-detection are often effort variables. Indeed, that’s the case here: start time (hours_of_day) and checklist duration both have high predictor importance. This tells us that the time of day and length of time the observer was out, both have a large effect on whether Wood Thrush was recorded on the checklist.\nBoth elevation variables have high importance, and the top habitat variables are from landcover classes 14, 21, and 22. To lookup the descriptions of each of these classes refer to file data/mcd12q1_fao_classes.csv in the data package for this book.\n\nread_csv(\"data/mcd12q1_fao_classes.csv\") %>% \n  select(class, name, description) %>% \n  filter(class %in% c(14, 21, 22)) %>% \n  knitr::kable()\n\n\n\n\n\n\n\n\n\nclass\nname\ndescription\n\n\n\n\n14\nDeciduous Broadleaf Forests\nDominated by deciduous broadleaf trees (>2m). Tree cover >60%.\n\n\n21\nOpen Forests\nTree cover 30-60% (canopy >2m).\n\n\n22\nSparse Forests\nTree cover 10-30% (canopy >2m).\n\n\n\n\n\nNote that high importance doesn’t tell us the direction of the relationship with detection, for that we’ll have to look at partial dependence plots.\nLet’s grab the top 9 most important predictors, which we’ll need in the next section.\n\n# top 9 predictors other than date\ntop_pred <- pi %>% \n  filter(!predictor %in% c(\"year\", \"day_of_year\")) %>% \n  slice_max(order_by = importance, n = 9) %>% \n  arrange(desc(importance))\n\n\n\n4.5.2 Partial dependence\nPartial dependence plots show the marginal effect of a given predictor on encounter rate averaged across the other predictors. These plots are generated by predicting encounter rate at a regular sequence of points across the full range of values of a given predictor. At each predictor value, predictions of encounter rate are made for a random subsample of the training dataset with the focal predictor fixed, but all other predictors left as is. The encounter rate predictions are then averaged across all the checklists in the training dataset giving an estimate of the average encounter rate at a specific value of the focal predictor. This is a cumbersome process, but we provide a function below that does all the hard work for you! This function takes the following arguments:\n\npredictor: the name of the predictor to calculate partial dependence for\nmodel: the encounter rate model\ndata: the original data used to train the model\nx_res: the resolution of the grid over which to calculate the partial dependence, i.e. the number of points between the minimum and maximum values of the predictor to evaluate partial dependence at\nn: number of points to subsample from the training data\n\n\n# function to calculate partial dependence for a single predictor\ncalculate_pd <- function(predictor, model, data, \n                         x_res = 25, n = 1000) {\n  # create prediction grid using quantiles\n  x_grid <- quantile(data[[predictor]],\n                     probs = seq(from = 0, to = 1, length = x_res),\n                     na.rm = TRUE)\n  # remove duplicates\n  x_grid <- x_grid[!duplicated(signif(x_grid, 8))]\n  x_grid <- unname(unique(x_grid))\n  grid <- data.frame(predictor = predictor, x = x_grid)\n  names(grid) <- c(\"predictor\", predictor)\n  \n  # subsample training data\n  n <- min(n, nrow(data))\n  data <- data[sample(seq.int(nrow(data)), size = n, replace = FALSE), ]\n  \n  # drop focal predictor from data\n  data <- data[names(data) != predictor]\n  grid <- merge(grid, data, all = TRUE)\n  \n  # predict\n  p <- predict(model, data = grid)\n  \n  # summarize\n  pd <- grid[, c(\"predictor\", predictor)]\n  names(pd) <- c(\"predictor\", \"x\")\n  pd$encounter_rate <- p$predictions[, 2]\n  pd <- dplyr::group_by(pd, predictor, x) %>% \n    dplyr::summarise(encounter_rate = mean(encounter_rate, na.rm = TRUE),\n                     .groups = \"drop\")\n  \n  return(pd)\n}\n\nNow we’ll use this function to calculate partial dependence for the top 9 predictors.\n\n# calculate partial dependence for each predictor\n# map is used to iteratively apply calculate_pd to each predictor\npd <- NULL\nfor (predictor in top_pred$predictor) {\n  pd <- calculate_pd(predictor, model = er_model, data = train_test$train) %>% \n    bind_rows(pd, .)\n}\n\n# calibrate predictions\npd$encounter_rate <- predict(calibration_model, \n                             newdata = tibble(pred = pd$encounter_rate), \n                             type = \"response\") %>% \n  as.numeric()\n\n# plot\nggplot(pd) +\n  aes(x = x, y = encounter_rate) +\n  geom_line() +\n  geom_point() +\n  scale_y_continuous(labels = scales::percent) +\n  facet_wrap(~ as_factor(predictor), nrow = 3, scales = \"free\") +\n  labs(x = NULL, y = \"Encounter Rate\") +\n  theme_minimal() +\n  theme_minimal() +\n  theme(panel.grid = element_blank(),\n        axis.line = element_line(color = \"grey60\"),\n        axis.ticks  = element_line(color = \"grey60\"))\n\n\n\n\n\n\n\n\nThere are a range of interesting responses here. As seen in Section @ref(ebird-explore), the encounter rate for Wood Thrush peaks early in the morning when they’re most likely to be singing, then quickly drops off in the middle of the day, before slightly increasing in the evening. Some other predictors show a more smoothly increasing relationship with encounter rate, for example, as the landscape contains more deciduous forest, the encounter rate increases.\nThe random forest model has a number of interactions, which are not displayed in these partial dependence plots. When interpreting these, bear in mind that there are likely some more complex interaction effects beneath these individual plots."
  },
  {
    "objectID": "encounter.html#encounter-predict",
    "href": "encounter.html#encounter-predict",
    "title": "4  Modeling Encounter Rate",
    "section": "4.6 Prediction",
    "text": "4.6 Prediction\nNow for the fun part: let’s use the calibrated random forest model to make a map of Wood Thrush encounter rate in Georgia! In Section @ref(envvar-pred), we created a prediction surface consisting of the habitat variables summarized on a regular grid of points across the study region. In this section, we’ll make predictions of encounter rate at these points. However, first we need to bring effort variables into this prediction surface. We’ll make predictions for a standard eBird checklist: a 1 km, 1 hour traveling count at the peak time of day for detecting this species. Finally, we’ll make these predictions for June 15, 2022, the middle of our June focal window for the latest year for which we have eBird data.\nTo find the time of day with the highest detection probability, we can look for the peak of the partial dependence plot. The one caveat to this approach is that it’s important we focus on times of day for which there are enough data to make predictions. In particular, there’s an increasing trend in detectability with earlier start times, and few checklists late at night, which can cause the model to incorrectly extrapolate that trend to show highest detectability at night. Let’s start by looking at a plot to see if this is happening here.\n\n# find peak time of day from partial dependence\npd_time <- calculate_pd(\"hours_of_day\",\n                        model = er_model, \n                        data = train_test$train,\n                        # make estimates at 30 minute intervals\n                        # using a subset of the training dataset\n                        x_res = 2 * 24, n = 1000) %>% \n  select(hours_of_day = x, encounter_rate)\n\n# histogram\ng_hist <- ggplot(train_test$train) +\n  aes(x = hours_of_day) +\n  geom_histogram(binwidth = 1, center = 0.5, color = \"grey30\",\n                 fill = \"grey50\") +\n  scale_x_continuous(breaks = seq(0, 24, by = 3)) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(x = \"Hours since midnight\",\n       y = \"# checklists\",\n       title = \"Distribution of observation start times\")\n\n# gam\ng_pd <- ggplot(pd_time) +\n  aes(x = hours_of_day, y = encounter_rate) +\n  geom_line() +\n  scale_x_continuous(breaks = seq(0, 24, by = 3)) +\n  labs(x = \"Hours since midnight\",\n       y = \"Probability of reporting\",\n       title = \"Observation start time partial dependence\")\n\n# combine\ngrid.arrange(g_hist, g_pd)\n\n\n\n\n\n\n\n\nThe peak probability of reporting is very close to the time of day during which the abundance of reports starts to increase, but from these graphs it is not entirely clear that the early morning peak in reports is well substantiated by abundant data. Let’s instead look for the peak time within hours of the day that contain at least 1% of the training data.\n\n# hours with at least 1% of checklists\nsearch_times <- train_test$train %>% \n  mutate(hours_of_day = floor(hours_of_day)) %>%\n  count(hours_of_day) %>% \n  mutate(pct = n / sum(n)) %>% \n  filter(pct >= 0.01)\n\n# constrained peak time\nt_peak <- pd_time %>% \n  filter(floor(hours_of_day) %in% search_times$hours_of_day) %>% \n  slice_max(order_by = encounter_rate) %>% \n  pull(hours_of_day)\nt_peak\n#> [1] 6.22\n\n\n\n\nBased on this analysis, the best time for detecting Wood Thrush is at 6:13 AM. Now we use this time to make predictions. This is equivalent to many eBirders all conducting a checklist within different grid cells on June 15 at 6:13 AM. We also add the other effort variables to the prediction dataset.\n\n# add effort covariates to prediction \npred_surface_eff <- pred_surface %>% \n  mutate(observation_date = ymd(\"2022-06-15\"),\n         year = year(observation_date),\n         day_of_year = yday(observation_date),\n         hours_of_day = t_peak,\n         effort_hours = 1,\n         effort_distance_km = 1,\n         number_observers = 1)\n\n# predict\npred_er <- predict(er_model, data = pred_surface_eff, type = \"response\")\npred_er <- pred_er$predictions[, 2]\n# apply calibration\npred_er_cal <- predict(calibration_model, \n                       data.frame(pred = pred_er), \n                       type = \"response\") %>% \n  as.numeric()\n# add encounter rate estimate to prediction surface\npredictions <- bind_cols(pred_surface_eff, \n                         encounter_rate = pred_er_cal) %>% \n  select(cell_id, x, y, encounter_rate) %>% \n  mutate(encounter_rate = pmin(pmax(encounter_rate, 0), 1))\n\nNext, we’ll convert this data frame to spatial features using sf, then rasterize the points using the prediction surface raster template.\n\nr_pred <- predictions %>% \n  # convert to spatial features\n  st_as_sf(coords = c(\"x\", \"y\"), crs = crs) %>% \n  select(encounter_rate) %>% \n  # rasterize\n  rasterize(r, field = \"encounter_rate\", fun = \"mean\") %>% \n  setNames(\"encounter_rate\")\n\n# save the raster\nr_pred <- writeRaster(r_pred, \"results/encounter-rate_woothr.tif\", \n                      overwrite = TRUE,\n                      gdal = \"COMPRESS=DEFLATE\")\n\nFinally, we can make a map of these encounter rate predictions!\n\npar(mar = c(3.5, 0.25, 0.25, 0.25))\n# set up plot area\nplot(study_region, col = NA, border = NA)\nplot(ne_land, col = \"#dddddd\", border = \"#888888\", lwd = 0.5, add = TRUE)\n\n# define quantile breaks\nbrks <- global(r_pred, fun = quantile, \n               probs = seq(0, 1, 0.1), na.rm = TRUE) %>% \n  as.numeric() %>% \n  unique()\n# label the bottom, middle, and top value\nlbls <- round(c(0, median(brks), max(brks)), 2)\n# ebird status and trends color palette\npal <- abundance_palette(length(brks) - 1)\nplot(r_pred, \n     col = pal, breaks = brks, \n     maxpixels = ncell(r_pred),\n     legend = FALSE, axes = FALSE, bty = \"n\",\n     add = TRUE)\n\n# borders\nplot(ne_state_lines, col = \"#ffffff\", lwd = 0.75, add = TRUE)\nplot(ne_country_lines, col = \"#ffffff\", lwd = 1.5, add = TRUE)\nplot(study_region, border = \"#000000\", col = NA, lwd = 1, add = TRUE)\nbox()\n\n# legend\npar(new = TRUE, mar = c(0, 0, 0, 0))\ntitle <- \"Wood Thrush Encounter Rate (June 2022)\"\nimage.plot(zlim = c(0, 1), legend.only = TRUE, \n           col = pal, breaks = seq(0, 1, length.out = length(brks)),\n           smallplot = c(0.25, 0.75, 0.06, 0.09),\n           horizontal = TRUE,\n           axis.args = list(at = c(0, 0.5, 1), labels = lbls,\n                            fg = \"black\", col.axis = \"black\",\n                            cex.axis = 0.75, lwd.ticks = 0.5,\n                            padj = -1.5),\n           legend.args = list(text = title,\n                              side = 3, col = \"black\",\n                              cex = 1, line = 0))\n\n\n\n\n\n\n\n\n\n\n\n\nCao, Chang, Davide Chicco, and Michael M. Hoffman. 2020. “The MCC-F1 Curve: A Performance Evaluation Technique for Binary Classification.” https://doi.org/10.48550/ARXIV.2006.11278.\n\n\nChen, Chao, Andy Liaw, and Leo Breiman. 2004. “Using Random Forest to Learn Imbalanced Data.” University of California, Berkeley 110 (1-12): 24.\n\n\nGuillera-Arroita, Gurutzeta, José J. Lahoz-Monfort, Jane Elith, Ascelin Gordon, Heini Kujala, Pia E. Lentini, Michael A. McCarthy, Reid Tingley, and Brendan A. Wintle. 2015. “Is My Species Distribution Model Fit for Purpose? Matching Data and Models to Applications.” Global Ecology and Biogeography 24 (3): 276–92.\n\n\nMurphy, Allan H. 1973. “A New Vector Partition of the Probability Score.” Journal of Applied Meteorology 12 (4): 595–600. https://doi.org/10.1175/1520-0450(1973)012<0595:ANVPOT>2.0.CO;2.\n\n\nNiculescu-Mizil, Alexandru, and Rich Caruana. 2005. “Predicting Good Probabilities with Supervised Learning.” In Proceedings of the 22nd International Conference on Machine Learning, 625–32. ACM.\n\n\nPlatt, John. 1999. “Probabilistic Outputs for Support Vector Machines and Comparisons to Regularized Likelihood Methods.” Advances in Large Margin Classifiers 10 (3): 61–74.\n\n\nRobinson, Orin J., Viviana Ruiz-Gutierrez, and Daniel Fink. 2018. “Correcting for Bias in Distribution Modelling for Rare Species Using Citizen Science Data.” Diversity and Distributions 24 (4): 460–72. https://doi.org/10.1111/ddi.12698.\n\n\nVaughan, I. P., and S. J. Ormerod. 2005. “The Continuing Challenges of Testing Species Distribution Models.” Journal of Applied Ecology 42 (4): 720–30. https://doi.org/10.1111/j.1365-2664.2005.01052.x."
  },
  {
    "objectID": "abundance.html#encounter-data",
    "href": "abundance.html#encounter-data",
    "title": "5  Modeling Relative Abundance",
    "section": "5.1 Data preparation",
    "text": "5.1 Data preparation\nLet’s get started by loading the necessary packages and data. If you worked through the previous chapters, you should have all the data required for this chapter. However, you may want to download the data package, and unzip it to your project directory, to ensure you’re working with exactly the same data as was used in the creation of this book.\n\nlibrary(ebirdst)\nlibrary(fields)\nlibrary(gridExtra)\nlibrary(mccf1)\nlibrary(ranger)\nlibrary(scam)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyverse)\n\n# set random number seed to insure fully repeatable results\nset.seed(1)\n\n# setup results directory for saved results\ndir.create(\"results/\", showWarnings = FALSE, recursive = TRUE)\n\n# habitat variables: landcover and elevation\nhabitat <- read_csv(\"data/environmental-variables_checklists.csv\")\n\n# zero-filled ebird data combined with habitat data\nchecklists <- read_csv(\"data/checklists-zf_woothr_june_us-ga.csv\") %>% \n  inner_join(habitat, by = \"checklist_id\")\n\n# prediction surface\npred_surface <- read_csv(\"data/environmental-variables_prediction-surface.csv\")\nr <- rast(\"data/prediction-surface.tif\") %>% \n  # this second rast() call removes all the values from the raster template\n  rast()\ncrs <- st_crs(r)\n\n# load gis data for making maps\nstudy_region <- read_sf(\"data/gis-data.gpkg\", \"ne_states\") %>% \n  filter(state_code == \"US-GA\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()\nne_land <- read_sf(\"data/gis-data.gpkg\", \"ne_land\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()\nne_country_lines <- read_sf(\"data/gis-data.gpkg\", \"ne_country_lines\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()\nne_state_lines <- read_sf(\"data/gis-data.gpkg\", \"ne_state_lines\") %>% \n  st_transform(crs = crs) %>% \n  st_geometry()\n\nNext we’ll perform a round of spatiotemporal subsampling on the data to reduce bias.\n\n# sample one checklist per 3km x 3km x 1 week grid for each year\n# sample detection/non-detection independently \nchecklists_ss <- grid_sample_stratified(checklists,\n                                        obs_column = \"species_observed\")\n\nFinally, we’ll split the data into 80% of checklists for training and 20% for testing and select only the columns we intend to use as predictors in the model training.\n\ntrain_test <- checklists_ss %>% \n  # select only the columns to be used in the model\n  select(species_observed, observation_count,\n         year, day_of_year, hours_of_day,\n         effort_hours, effort_distance_km, number_observers, \n         starts_with(\"landcover_\"),\n         starts_with(\"elevation_\")) %>% \n  drop_na() %>% \n  # split into 80/20 test/train\n  split(if_else(runif(nrow(.)) <= 0.8, \"train\", \"test\"))"
  },
  {
    "objectID": "abundance.html#hurdle-model",
    "href": "abundance.html#hurdle-model",
    "title": "5  Modeling Relative Abundance",
    "section": "5.2 Hurdle model",
    "text": "5.2 Hurdle model\nFor this two-step hurdle model, we’ll start by training exactly the same encounter rate model as in the previous chapter. Then we’ll subset the eBird checklist to only those where the species was detected or predicted to occur by the encounter rate model. We’ll use this subset of the data to train a second random forest model for expected count. Finally we’ll combine the results of the two steps together to produce estimates of relative abundance.\n\n5.2.1 Step 1: Encounter rate\nIf you haven’t done so, read Chapter @ref(encounter) for details on the calibrated encounter rate model. Here we repeat the process of modeling encounter rate in a compressed form.\n\n# calculate detection frequency for the balance random forest\ndetection_freq <- mean(train_test$train$species_observed)\n\n# train a random forest model for encounter rate\ntrain_er <- select(train_test$train, -observation_count)\ner_model <- ranger(formula =  as.factor(species_observed) ~ ., \n                   data = train_er,\n                   importance = \"impurity\",\n                   probability = TRUE,\n                   replace = TRUE,\n                   sample.fraction = c(detection_freq, detection_freq))\n\n# select the mcc-f1 optimizing occurrence threshold\nobs_pred <- tibble(obs = as.integer(train_er$species_observed), \n                   pred = er_model$predictions[, 2]) %>% \n  drop_na()\nmcc_f1 <- mccf1(response = obs_pred$obs, predictor = obs_pred$pred)\nmcc_f1_summary <- summary(mcc_f1)\nthreshold <- mcc_f1_summary$best_threshold[1]\n\n# calibration model\ncalibration_model <- scam(obs ~ s(pred, k = 6, bs = \"mpi\"), \n                          gamma = 2,\n                          data = obs_pred)\n#>  mccf1_metric best_threshold\n#>         0.392           0.59\n\n\n\n5.2.2 Step 2: Expected count\nFor the second step, we train a random forests model to estimate the expected count of individuals on eBird checklists where the species was detected or predicted to be detected by the encounter rate model. So, we’ll start by subsetting the data to just these checklists. In addition, we’ll remove any observations for which the observer reported that Wood Thrush was present, but didn’t report a count of the number of individuals (coded as a count of “X” in the eBird database, but converted to NA in our dataset).\n\n# attach the predicted encounter rate based on out of bag samples\ntrain_er <- train_test$train\ntrain_er$pred_er <- er_model$predictions[, 2]\n# subset to only observed or predicted detections\ntrain_count <- train_er %>% \n  filter(!is.na(observation_count),\n         observation_count > 0 | pred_er > threshold) %>% \n  select(-species_observed, -pred_er)\n\nWe’ve found that including predicted encounter rate as a predictor in the count model improves predictive performance. So, with this in mind, we predict encounter rate for the training dataset and add it as an additional column.\n\npredicted_er <- predict(er_model, data = train_count, type = \"response\")\npredicted_er <- predicted_er$predictions[, 2]\ntrain_count$predicted_er <- predicted_er\n\nFinally, we train a random forests model to estimate count. This is superficially very similar to the random forests model for encounter rate; however, for count we’re using a regression random forest while for encounter rate we used a balanced classification random forest.\n\ncount_model <- ranger(formula = observation_count ~ .,\n                      data = train_count,\n                      importance = \"impurity\",\n                      replace = TRUE)\n\n\n\n5.2.3 Assessment\nTODO"
  },
  {
    "objectID": "abundance.html#abundance-predict",
    "href": "abundance.html#abundance-predict",
    "title": "5  Modeling Relative Abundance",
    "section": "5.3 Prediction",
    "text": "5.3 Prediction\nJust as we did in the previous chapter for encounter rate, we can estimate relative abundance over our prediction surface. First we estimate encounter rate and count, then we multiply these together to get an estimate of relative abundance. Let’s start by added the effort variables to the prediction grid for a standard eBird checklist at the optimal time of day for detecting Wood Thrush. Recall from the previous chapter that we determined the optimal time of day for detecting Wood Thrush was around 6:15AM.\n\npred_surface_eff <- pred_surface %>% \n  mutate(observation_date = ymd(\"2022-06-15\"),\n         year = year(observation_date),\n         day_of_year = yday(observation_date),\n         # determined as optimal time for detection in previous chapter\n         hours_of_day = 6.2,\n         effort_hours = 1,\n         effort_distance_km = 1,\n         number_observers = 1)\n\nNow we can estimate calibrated encounter rate and count for each point on the prediction surface.\n\n# encounter rate estimate\npred_er <- predict(er_model, data = pred_surface_eff, type = \"response\")\npred_er <- pred_er$predictions[, 2]\n# apply calibration\npred_er_cal <- predict(calibration_model, \n                       data.frame(pred = pred_er), \n                       type = \"response\") %>% \n  as.numeric()\n\n# add predicted encounter rate required for count estimates\npred_surface_eff$predicted_er <- pred_er\n# count estimate\npred_count <- predict(count_model, data = pred_surface_eff, type = \"response\")\npred_count <- pred_count$predictions\n\n# add estimates to prediction surface\npredictions <- bind_cols(pred_surface_eff, \n                         encounter_rate = pred_er_cal,\n                         count = pred_count) %>% \n  select(cell_id, x, y, encounter_rate, count) %>% \n  mutate(encounter_rate = pmin(pmax(encounter_rate, 0), 1))\n\nNext, we add a column for the relative abundance estimate (the product of the encounter rate and count estimates), and convert these estimates to raster format.\n\nr_pred <- predictions %>% \n  # estimate relative abundance\n  mutate(abundance = encounter_rate * count) %>% \n  # convert to spatial features\n  st_as_sf(coords = c(\"x\", \"y\"), crs = crs) %>% \n  select(encounter_rate, count, abundance) %>% \n  # rasterize\n  rasterize(r, field = c(\"encounter_rate\", \"count\", \"abundance\"),\n            fun = \"mean\") %>% \n  setNames(c(\"encounter_rate\", \"count\", \"abundance\"))\n\n# save the raster\n# 3 bands: encounter_rate, count, and relative abundance\nr_pred <- writeRaster(r_pred, \"results/abundance_woothr.tif\", \n                      overwrite = TRUE,\n                      gdal = \"COMPRESS=DEFLATE\")\n\nFinally we’ll produce a map of relative abundance. The values shown on this map are the expected number of Wood Thrush seen by an average eBirder conducting a 1 hour, 1 km checklist for which counting started at about 6:15AM on June 15, 2022. Since detectability is not perfect, we expect true Wood Thrush abundance to be higher than these values, but without estimating the detection rate directly it’s difficult to say how much higher.\n\npar(mar = c(3.5, 0.25, 0.25, 0.25))\n# set up plot area\nplot(study_region, col = NA, border = NA)\nplot(ne_land, col = \"#dddddd\", border = \"#888888\", lwd = 0.5, add = TRUE)\n\n# define quantile breaks\nbrks <- global(r_pred[[\"abundance\"]], fun = quantile, \n               probs = seq(0, 1, 0.1), na.rm = TRUE) %>% \n  as.numeric() %>% \n  unique()\n# label the bottom, middle, and top value\nlbls <- round(c(0, median(brks), max(brks)), 2)\n# ebird status and trends color palette\npal <- abundance_palette(length(brks) - 1)\nplot(r_pred[[\"abundance\"]], \n     col = pal, breaks = brks, \n     maxpixels = ncell(r_pred),\n     legend = FALSE, axes = FALSE, bty = \"n\",\n     add = TRUE)\n\n# borders\nplot(ne_state_lines, col = \"#ffffff\", lwd = 0.75, add = TRUE)\nplot(ne_country_lines, col = \"#ffffff\", lwd = 1.5, add = TRUE)\nplot(study_region, border = \"#000000\", col = NA, lwd = 1, add = TRUE)\nbox()\n\n# legend\npar(new = TRUE, mar = c(0, 0, 0, 0))\ntitle <- \"Wood Thrush Relative Abundance (June 2022)\"\nimage.plot(zlim = c(0, 1), legend.only = TRUE, \n           col = pal, breaks = seq(0, 1, length.out = length(brks)),\n           smallplot = c(0.25, 0.75, 0.06, 0.09),\n           horizontal = TRUE,\n           axis.args = list(at = c(0, 0.5, 1), labels = lbls,\n                            fg = \"black\", col.axis = \"black\",\n                            cex.axis = 0.75, lwd.ticks = 0.5,\n                            padj = -1.5),\n           legend.args = list(text = title,\n                              side = 3, col = \"black\",\n                              cex = 1, line = 0))\n\n\n\n\n\n\n\n\n\n\n\n\nKeyser, Spencer R., Daniel Fink, David Gudex-Cross, Volker C. Radeloff, Jonathan N. Pauli, and Benjamin Zuckerberg. 2023. “Snow Cover Dynamics: An Overlooked yet Important Feature of Winter Bird Occurrence and Abundance Across the United States.” Ecography 2023 (1). https://doi.org/10.1111/ecog.06378."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Amatulli, Giuseppe, Sami Domisch, Mao-Ning Tuanmu, Benoit Parmentier,\nAjay Ranipeta, Jeremy Malczyk, and Walter Jetz. 2018. “A Suite of\nGlobal, Cross-Scale Topographic Variables for Environmental and\nBiodiversity Modeling.” Scientific Data 5 (March):\n180040. https://doi.org/10.1038/sdata.2018.40.\n\n\nCao, Chang, Davide Chicco, and Michael M. Hoffman. 2020. “The\nMCC-F1 Curve: A Performance Evaluation Technique for Binary\nClassification.” https://doi.org/10.48550/ARXIV.2006.11278.\n\n\nChen, Chao, Andy Liaw, and Leo Breiman. 2004. “Using Random Forest\nto Learn Imbalanced Data.” University of California,\nBerkeley 110 (1-12): 24.\n\n\nCourter, Jason R., Ron J. Johnson, Claire M. Stuyck, Brian A. Lang, and\nEvan W. Kaiser. 2013. “Weekend Bias in Citizen\nScience Data Reporting: Implications for Phenology\nStudies.” International Journal of Biometeorology 57\n(5): 715–20. https://doi.org/10.1007/s00484-012-0598-7.\n\n\nEllis, Murray V., and Jennifer E. Taylor. 2018. “Effects of\nWeather, Time of Day, and Survey Effort on Estimates of Species Richness\nin Temperate Woodlands.” Emu-Austral Ornithology 118\n(2): 183–92.\n\n\nFriedl, Mark, and Damien Sulla-Menashe. 2015. “MCD12Q1\nMODIS/Terra+Aqua Land Cover Type Yearly L3\nGlobal 500m SIN Grid V006.” NASA EOSDIS\nLand Processes DAAC. https://doi.org/10.5067/MODIS/MCD12Q1.006.\n\n\nGreenwood, Jeremy J. D. 2007. “Citizens, Science and Bird\nConservation.” Journal of Ornithology 148 (1): 77–124.\nhttps://doi.org/10.1007/s10336-007-0239-9.\n\n\nGuillera-Arroita, Gurutzeta, José J. Lahoz-Monfort, Jane Elith, Ascelin\nGordon, Heini Kujala, Pia E. Lentini, Michael A. McCarthy, Reid Tingley,\nand Brendan A. Wintle. 2015. “Is My Species Distribution Model Fit\nfor Purpose? Matching Data and Models to\nApplications.” Global Ecology and Biogeography 24 (3):\n276–92.\n\n\nJohnston, Alison, Daniel Fink, Wesley M. Hochachka, and Steve Kelling.\n2018. “Estimates of Observer Expertise Improve Species\nDistributions from Citizen Science Data.” Methods in Ecology\nand Evolution 9 (1): 88–97.\n\n\nJohnston, Alison, Stuart E. Newson, Kate Risely, Andy J. Musgrove, Dario\nMassimino, Stephen R. Baillie, and James W. Pearce-Higgins. 2014.\n“Species Traits Explain Variation in Detectability of\nUK Birds.” Bird Study 61 (3): 340–50.\n\n\nKadmon, Ronen, Oren Farber, and Avinoam Danin. 2004. “Effect of\nRoadside Bias on the Accuracy of Predictive Maps Produced by Bioclimatic\nModels.” Ecological Applications 14 (2): 401–13.\n\n\nKelling, Steve, Alison Johnston, Daniel Fink, Viviana Ruiz-Gutierrez,\nRick Bonney, Aletta Bonn, Miguel Fernandez, et al. 2018. “Finding\nthe Signal in the Noise of Citizen Science\nObservations.” bioRxiv, May, 326314. https://doi.org/10.1101/326314.\n\n\nKeyser, Spencer R., Daniel Fink, David Gudex-Cross, Volker C. Radeloff,\nJonathan N. Pauli, and Benjamin Zuckerberg. 2023. “Snow Cover\nDynamics: An Overlooked yet Important Feature of Winter Bird Occurrence\nand Abundance Across the United States.”\nEcography 2023 (1). https://doi.org/10.1111/ecog.06378.\n\n\nLa Sorte, Frank A., Christopher A. Lepczyk, Jessica L. Burnett, Allen H.\nHurlbert, Morgan W. Tingley, and Benjamin Zuckerberg. 2018.\n“Opportunities and Challenges for Big Data Ornithology.”\nThe Condor 120 (2): 414–26.\n\n\nLuck, Gary W., Taylor H. Ricketts, Gretchen C. Daily, and Marc Imhoff.\n2004. “Alleviating Spatial Conflict Between People and\nBiodiversity.” Proceedings of the National Academy of\nSciences 101 (1): 182–86. https://doi.org/10.1073/pnas.2237148100.\n\n\nMurphy, Allan H. 1973. “A New Vector Partition of the\nProbability Score.” Journal of Applied\nMeteorology 12 (4): 595–600. https://doi.org/10.1175/1520-0450(1973)012<0595:ANVPOT>2.0.CO;2.\n\n\nNiculescu-Mizil, Alexandru, and Rich Caruana. 2005. “Predicting\nGood Probabilities with Supervised Learning.” In Proceedings\nof the 22nd International Conference on Machine\nLearning, 625–32. ACM.\n\n\nOliveira, Camilo Viana, Fabio Olmos, Manoel dos Santos-Filho, and\nChristine Steiner São Bernardo. 2018. “Observation of\nDiurnal Soaring Raptors In Northeastern Brazil Depends On Weather\nConditions and Time of Day.”\nJournal of Raptor Research 52 (1): 56–65.\n\n\nPlatt, John. 1999. “Probabilistic Outputs for Support Vector\nMachines and Comparisons to Regularized Likelihood Methods.”\nAdvances in Large Margin Classifiers 10 (3): 61–74.\n\n\nPrendergast, J. R., S. N. Wood, J. H. Lawton, and B. C. Eversham. 1993.\n“Correcting for Variation in Recording Effort in Analyses of\nDiversity Hotspots.” Biodiversity Letters, 39–53.\n\n\nRobinson, Orin J., Viviana Ruiz-Gutierrez, and Daniel Fink. 2018.\n“Correcting for Bias in Distribution Modelling for Rare Species\nUsing Citizen Science Data.” Diversity and Distributions\n24 (4): 460–72. https://doi.org/10.1111/ddi.12698.\n\n\nRobinson, Orin J., Viviana Ruiz-Gutierrez, Daniel Fink, Robert J. Meese,\nMarcel Holyoak, and Evan G. Cooch. 2018. “Using Citizen Science\nData in Integrated Population Models to Inform Conservation\nDecision-Making.” bioRxiv, 293464.\n\n\nSullivan, Brian L., Jocelyn L. Aycrigg, Jessie H. Barry, Rick E. Bonney,\nNicholas Bruns, Caren B. Cooper, Theo Damoulas, et al. 2014. “The\neBird Enterprise: An Integrated\nApproach to Development and Application of Citizen Science.”\nBiological Conservation 169 (January): 31–40. https://doi.org/10.1016/j.biocon.2013.11.003.\n\n\nTulloch, Ayesha IT, and Judit K. Szabo. 2012. “A Behavioural\nEcology Approach to Understand Volunteer Surveying for Citizen Science\nDatasets.” Emu-Austral Ornithology 112 (4): 313–25.\n\n\nVaughan, I. P., and S. J. Ormerod. 2005. “The Continuing\nChallenges of Testing Species Distribution Models.” Journal\nof Applied Ecology 42 (4): 720–30. https://doi.org/10.1111/j.1365-2664.2005.01052.x."
  }
]